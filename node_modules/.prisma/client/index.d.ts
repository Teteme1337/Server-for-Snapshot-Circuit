
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Components
 * 
 */
export type Components = $Result.DefaultSelection<Prisma.$ComponentsPayload>
/**
 * Model FavoriteComponents
 * 
 */
export type FavoriteComponents = $Result.DefaultSelection<Prisma.$FavoriteComponentsPayload>
/**
 * Model ComponentProperties
 * 
 */
export type ComponentProperties = $Result.DefaultSelection<Prisma.$ComponentPropertiesPayload>
/**
 * Model ComponentSubtype
 * 
 */
export type ComponentSubtype = $Result.DefaultSelection<Prisma.$ComponentSubtypePayload>
/**
 * Model ComponentType
 * 
 */
export type ComponentType = $Result.DefaultSelection<Prisma.$ComponentTypePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.components`: Exposes CRUD operations for the **Components** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Components
    * const components = await prisma.components.findMany()
    * ```
    */
  get components(): Prisma.ComponentsDelegate<ExtArgs>;

  /**
   * `prisma.favoriteComponents`: Exposes CRUD operations for the **FavoriteComponents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteComponents
    * const favoriteComponents = await prisma.favoriteComponents.findMany()
    * ```
    */
  get favoriteComponents(): Prisma.FavoriteComponentsDelegate<ExtArgs>;

  /**
   * `prisma.componentProperties`: Exposes CRUD operations for the **ComponentProperties** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentProperties
    * const componentProperties = await prisma.componentProperties.findMany()
    * ```
    */
  get componentProperties(): Prisma.ComponentPropertiesDelegate<ExtArgs>;

  /**
   * `prisma.componentSubtype`: Exposes CRUD operations for the **ComponentSubtype** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentSubtypes
    * const componentSubtypes = await prisma.componentSubtype.findMany()
    * ```
    */
  get componentSubtype(): Prisma.ComponentSubtypeDelegate<ExtArgs>;

  /**
   * `prisma.componentType`: Exposes CRUD operations for the **ComponentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentTypes
    * const componentTypes = await prisma.componentType.findMany()
    * ```
    */
  get componentType(): Prisma.ComponentTypeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Components: 'Components',
    FavoriteComponents: 'FavoriteComponents',
    ComponentProperties: 'ComponentProperties',
    ComponentSubtype: 'ComponentSubtype',
    ComponentType: 'ComponentType'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "components" | "favoriteComponents" | "componentProperties" | "componentSubtype" | "componentType"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Components: {
        payload: Prisma.$ComponentsPayload<ExtArgs>
        fields: Prisma.ComponentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>
          }
          findFirst: {
            args: Prisma.ComponentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>
          }
          findMany: {
            args: Prisma.ComponentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>[]
          }
          create: {
            args: Prisma.ComponentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>
          }
          createMany: {
            args: Prisma.ComponentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>[]
          }
          delete: {
            args: Prisma.ComponentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>
          }
          update: {
            args: Prisma.ComponentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>
          }
          deleteMany: {
            args: Prisma.ComponentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentsPayload>
          }
          aggregate: {
            args: Prisma.ComponentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponents>
          }
          groupBy: {
            args: Prisma.ComponentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentsCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentsCountAggregateOutputType> | number
          }
        }
      }
      FavoriteComponents: {
        payload: Prisma.$FavoriteComponentsPayload<ExtArgs>
        fields: Prisma.FavoriteComponentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteComponentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteComponentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>
          }
          findFirst: {
            args: Prisma.FavoriteComponentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteComponentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>
          }
          findMany: {
            args: Prisma.FavoriteComponentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>[]
          }
          create: {
            args: Prisma.FavoriteComponentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>
          }
          createMany: {
            args: Prisma.FavoriteComponentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteComponentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>[]
          }
          delete: {
            args: Prisma.FavoriteComponentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>
          }
          update: {
            args: Prisma.FavoriteComponentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>
          }
          deleteMany: {
            args: Prisma.FavoriteComponentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteComponentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteComponentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteComponentsPayload>
          }
          aggregate: {
            args: Prisma.FavoriteComponentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteComponents>
          }
          groupBy: {
            args: Prisma.FavoriteComponentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteComponentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteComponentsCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteComponentsCountAggregateOutputType> | number
          }
        }
      }
      ComponentProperties: {
        payload: Prisma.$ComponentPropertiesPayload<ExtArgs>
        fields: Prisma.ComponentPropertiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentPropertiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentPropertiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>
          }
          findFirst: {
            args: Prisma.ComponentPropertiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentPropertiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>
          }
          findMany: {
            args: Prisma.ComponentPropertiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>[]
          }
          create: {
            args: Prisma.ComponentPropertiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>
          }
          createMany: {
            args: Prisma.ComponentPropertiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentPropertiesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>[]
          }
          delete: {
            args: Prisma.ComponentPropertiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>
          }
          update: {
            args: Prisma.ComponentPropertiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>
          }
          deleteMany: {
            args: Prisma.ComponentPropertiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentPropertiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentPropertiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPropertiesPayload>
          }
          aggregate: {
            args: Prisma.ComponentPropertiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentProperties>
          }
          groupBy: {
            args: Prisma.ComponentPropertiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentPropertiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentPropertiesCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentPropertiesCountAggregateOutputType> | number
          }
        }
      }
      ComponentSubtype: {
        payload: Prisma.$ComponentSubtypePayload<ExtArgs>
        fields: Prisma.ComponentSubtypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentSubtypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentSubtypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>
          }
          findFirst: {
            args: Prisma.ComponentSubtypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentSubtypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>
          }
          findMany: {
            args: Prisma.ComponentSubtypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>[]
          }
          create: {
            args: Prisma.ComponentSubtypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>
          }
          createMany: {
            args: Prisma.ComponentSubtypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentSubtypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>[]
          }
          delete: {
            args: Prisma.ComponentSubtypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>
          }
          update: {
            args: Prisma.ComponentSubtypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>
          }
          deleteMany: {
            args: Prisma.ComponentSubtypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentSubtypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentSubtypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSubtypePayload>
          }
          aggregate: {
            args: Prisma.ComponentSubtypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentSubtype>
          }
          groupBy: {
            args: Prisma.ComponentSubtypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentSubtypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentSubtypeCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentSubtypeCountAggregateOutputType> | number
          }
        }
      }
      ComponentType: {
        payload: Prisma.$ComponentTypePayload<ExtArgs>
        fields: Prisma.ComponentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>
          }
          findFirst: {
            args: Prisma.ComponentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>
          }
          findMany: {
            args: Prisma.ComponentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>[]
          }
          create: {
            args: Prisma.ComponentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>
          }
          createMany: {
            args: Prisma.ComponentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>[]
          }
          delete: {
            args: Prisma.ComponentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>
          }
          update: {
            args: Prisma.ComponentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>
          }
          deleteMany: {
            args: Prisma.ComponentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTypePayload>
          }
          aggregate: {
            args: Prisma.ComponentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentType>
          }
          groupBy: {
            args: Prisma.ComponentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentTypeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    favorite_component: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorite_component?: boolean | UsersCountOutputTypeCountFavorite_componentArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFavorite_componentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteComponentsWhereInput
  }


  /**
   * Count Type ComponentsCountOutputType
   */

  export type ComponentsCountOutputType = {
    favorite_component: number
    component_properties: number
  }

  export type ComponentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorite_component?: boolean | ComponentsCountOutputTypeCountFavorite_componentArgs
    component_properties?: boolean | ComponentsCountOutputTypeCountComponent_propertiesArgs
  }

  // Custom InputTypes
  /**
   * ComponentsCountOutputType without action
   */
  export type ComponentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentsCountOutputType
     */
    select?: ComponentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComponentsCountOutputType without action
   */
  export type ComponentsCountOutputTypeCountFavorite_componentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteComponentsWhereInput
  }

  /**
   * ComponentsCountOutputType without action
   */
  export type ComponentsCountOutputTypeCountComponent_propertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentPropertiesWhereInput
  }


  /**
   * Count Type ComponentSubtypeCountOutputType
   */

  export type ComponentSubtypeCountOutputType = {
    components: number
  }

  export type ComponentSubtypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | ComponentSubtypeCountOutputTypeCountComponentsArgs
  }

  // Custom InputTypes
  /**
   * ComponentSubtypeCountOutputType without action
   */
  export type ComponentSubtypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtypeCountOutputType
     */
    select?: ComponentSubtypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComponentSubtypeCountOutputType without action
   */
  export type ComponentSubtypeCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentsWhereInput
  }


  /**
   * Count Type ComponentTypeCountOutputType
   */

  export type ComponentTypeCountOutputType = {
    subtypes: number
  }

  export type ComponentTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtypes?: boolean | ComponentTypeCountOutputTypeCountSubtypesArgs
  }

  // Custom InputTypes
  /**
   * ComponentTypeCountOutputType without action
   */
  export type ComponentTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTypeCountOutputType
     */
    select?: ComponentTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComponentTypeCountOutputType without action
   */
  export type ComponentTypeCountOutputTypeCountSubtypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentSubtypeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    favorite_component?: boolean | Users$favorite_componentArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorite_component?: boolean | Users$favorite_componentArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      favorite_component: Prisma.$FavoriteComponentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favorite_component<T extends Users$favorite_componentArgs<ExtArgs> = {}>(args?: Subset<T, Users$favorite_componentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.favorite_component
   */
  export type Users$favorite_componentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    where?: FavoriteComponentsWhereInput
    orderBy?: FavoriteComponentsOrderByWithRelationInput | FavoriteComponentsOrderByWithRelationInput[]
    cursor?: FavoriteComponentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteComponentsScalarFieldEnum | FavoriteComponentsScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Components
   */

  export type AggregateComponents = {
    _count: ComponentsCountAggregateOutputType | null
    _avg: ComponentsAvgAggregateOutputType | null
    _sum: ComponentsSumAggregateOutputType | null
    _min: ComponentsMinAggregateOutputType | null
    _max: ComponentsMaxAggregateOutputType | null
  }

  export type ComponentsAvgAggregateOutputType = {
    id: number | null
    subtype_id: number | null
  }

  export type ComponentsSumAggregateOutputType = {
    id: number | null
    subtype_id: number | null
  }

  export type ComponentsMinAggregateOutputType = {
    id: number | null
    title: string | null
    component_photo: string | null
    description: string | null
    documentation_name: string | null
    subtype_id: number | null
  }

  export type ComponentsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    component_photo: string | null
    description: string | null
    documentation_name: string | null
    subtype_id: number | null
  }

  export type ComponentsCountAggregateOutputType = {
    id: number
    title: number
    component_photo: number
    description: number
    documentation_name: number
    subtype_id: number
    _all: number
  }


  export type ComponentsAvgAggregateInputType = {
    id?: true
    subtype_id?: true
  }

  export type ComponentsSumAggregateInputType = {
    id?: true
    subtype_id?: true
  }

  export type ComponentsMinAggregateInputType = {
    id?: true
    title?: true
    component_photo?: true
    description?: true
    documentation_name?: true
    subtype_id?: true
  }

  export type ComponentsMaxAggregateInputType = {
    id?: true
    title?: true
    component_photo?: true
    description?: true
    documentation_name?: true
    subtype_id?: true
  }

  export type ComponentsCountAggregateInputType = {
    id?: true
    title?: true
    component_photo?: true
    description?: true
    documentation_name?: true
    subtype_id?: true
    _all?: true
  }

  export type ComponentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Components to aggregate.
     */
    where?: ComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentsOrderByWithRelationInput | ComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Components
    **/
    _count?: true | ComponentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentsMaxAggregateInputType
  }

  export type GetComponentsAggregateType<T extends ComponentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComponents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponents[P]>
      : GetScalarType<T[P], AggregateComponents[P]>
  }




  export type ComponentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentsWhereInput
    orderBy?: ComponentsOrderByWithAggregationInput | ComponentsOrderByWithAggregationInput[]
    by: ComponentsScalarFieldEnum[] | ComponentsScalarFieldEnum
    having?: ComponentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentsCountAggregateInputType | true
    _avg?: ComponentsAvgAggregateInputType
    _sum?: ComponentsSumAggregateInputType
    _min?: ComponentsMinAggregateInputType
    _max?: ComponentsMaxAggregateInputType
  }

  export type ComponentsGroupByOutputType = {
    id: number
    title: string
    component_photo: string
    description: string
    documentation_name: string
    subtype_id: number
    _count: ComponentsCountAggregateOutputType | null
    _avg: ComponentsAvgAggregateOutputType | null
    _sum: ComponentsSumAggregateOutputType | null
    _min: ComponentsMinAggregateOutputType | null
    _max: ComponentsMaxAggregateOutputType | null
  }

  type GetComponentsGroupByPayload<T extends ComponentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentsGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentsGroupByOutputType[P]>
        }
      >
    >


  export type ComponentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    component_photo?: boolean
    description?: boolean
    documentation_name?: boolean
    subtype_id?: boolean
    favorite_component?: boolean | Components$favorite_componentArgs<ExtArgs>
    component_properties?: boolean | Components$component_propertiesArgs<ExtArgs>
    subtype?: boolean | ComponentSubtypeDefaultArgs<ExtArgs>
    _count?: boolean | ComponentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["components"]>

  export type ComponentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    component_photo?: boolean
    description?: boolean
    documentation_name?: boolean
    subtype_id?: boolean
    subtype?: boolean | ComponentSubtypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["components"]>

  export type ComponentsSelectScalar = {
    id?: boolean
    title?: boolean
    component_photo?: boolean
    description?: boolean
    documentation_name?: boolean
    subtype_id?: boolean
  }

  export type ComponentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorite_component?: boolean | Components$favorite_componentArgs<ExtArgs>
    component_properties?: boolean | Components$component_propertiesArgs<ExtArgs>
    subtype?: boolean | ComponentSubtypeDefaultArgs<ExtArgs>
    _count?: boolean | ComponentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ComponentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtype?: boolean | ComponentSubtypeDefaultArgs<ExtArgs>
  }

  export type $ComponentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Components"
    objects: {
      favorite_component: Prisma.$FavoriteComponentsPayload<ExtArgs>[]
      component_properties: Prisma.$ComponentPropertiesPayload<ExtArgs>[]
      subtype: Prisma.$ComponentSubtypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      component_photo: string
      description: string
      documentation_name: string
      subtype_id: number
    }, ExtArgs["result"]["components"]>
    composites: {}
  }

  type ComponentsGetPayload<S extends boolean | null | undefined | ComponentsDefaultArgs> = $Result.GetResult<Prisma.$ComponentsPayload, S>

  type ComponentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentsCountAggregateInputType | true
    }

  export interface ComponentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Components'], meta: { name: 'Components' } }
    /**
     * Find zero or one Components that matches the filter.
     * @param {ComponentsFindUniqueArgs} args - Arguments to find a Components
     * @example
     * // Get one Components
     * const components = await prisma.components.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentsFindUniqueArgs>(args: SelectSubset<T, ComponentsFindUniqueArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Components that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentsFindUniqueOrThrowArgs} args - Arguments to find a Components
     * @example
     * // Get one Components
     * const components = await prisma.components.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentsFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Components that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentsFindFirstArgs} args - Arguments to find a Components
     * @example
     * // Get one Components
     * const components = await prisma.components.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentsFindFirstArgs>(args?: SelectSubset<T, ComponentsFindFirstArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Components that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentsFindFirstOrThrowArgs} args - Arguments to find a Components
     * @example
     * // Get one Components
     * const components = await prisma.components.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentsFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Components that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Components
     * const components = await prisma.components.findMany()
     * 
     * // Get first 10 Components
     * const components = await prisma.components.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentsWithIdOnly = await prisma.components.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentsFindManyArgs>(args?: SelectSubset<T, ComponentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Components.
     * @param {ComponentsCreateArgs} args - Arguments to create a Components.
     * @example
     * // Create one Components
     * const Components = await prisma.components.create({
     *   data: {
     *     // ... data to create a Components
     *   }
     * })
     * 
     */
    create<T extends ComponentsCreateArgs>(args: SelectSubset<T, ComponentsCreateArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Components.
     * @param {ComponentsCreateManyArgs} args - Arguments to create many Components.
     * @example
     * // Create many Components
     * const components = await prisma.components.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentsCreateManyArgs>(args?: SelectSubset<T, ComponentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Components and returns the data saved in the database.
     * @param {ComponentsCreateManyAndReturnArgs} args - Arguments to create many Components.
     * @example
     * // Create many Components
     * const components = await prisma.components.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Components and only return the `id`
     * const componentsWithIdOnly = await prisma.components.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentsCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Components.
     * @param {ComponentsDeleteArgs} args - Arguments to delete one Components.
     * @example
     * // Delete one Components
     * const Components = await prisma.components.delete({
     *   where: {
     *     // ... filter to delete one Components
     *   }
     * })
     * 
     */
    delete<T extends ComponentsDeleteArgs>(args: SelectSubset<T, ComponentsDeleteArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Components.
     * @param {ComponentsUpdateArgs} args - Arguments to update one Components.
     * @example
     * // Update one Components
     * const components = await prisma.components.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentsUpdateArgs>(args: SelectSubset<T, ComponentsUpdateArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Components.
     * @param {ComponentsDeleteManyArgs} args - Arguments to filter Components to delete.
     * @example
     * // Delete a few Components
     * const { count } = await prisma.components.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentsDeleteManyArgs>(args?: SelectSubset<T, ComponentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Components
     * const components = await prisma.components.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentsUpdateManyArgs>(args: SelectSubset<T, ComponentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Components.
     * @param {ComponentsUpsertArgs} args - Arguments to update or create a Components.
     * @example
     * // Update or create a Components
     * const components = await prisma.components.upsert({
     *   create: {
     *     // ... data to create a Components
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Components we want to update
     *   }
     * })
     */
    upsert<T extends ComponentsUpsertArgs>(args: SelectSubset<T, ComponentsUpsertArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentsCountArgs} args - Arguments to filter Components to count.
     * @example
     * // Count the number of Components
     * const count = await prisma.components.count({
     *   where: {
     *     // ... the filter for the Components we want to count
     *   }
     * })
    **/
    count<T extends ComponentsCountArgs>(
      args?: Subset<T, ComponentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentsAggregateArgs>(args: Subset<T, ComponentsAggregateArgs>): Prisma.PrismaPromise<GetComponentsAggregateType<T>>

    /**
     * Group by Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentsGroupByArgs['orderBy'] }
        : { orderBy?: ComponentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Components model
   */
  readonly fields: ComponentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Components.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favorite_component<T extends Components$favorite_componentArgs<ExtArgs> = {}>(args?: Subset<T, Components$favorite_componentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "findMany"> | Null>
    component_properties<T extends Components$component_propertiesArgs<ExtArgs> = {}>(args?: Subset<T, Components$component_propertiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "findMany"> | Null>
    subtype<T extends ComponentSubtypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentSubtypeDefaultArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Components model
   */ 
  interface ComponentsFieldRefs {
    readonly id: FieldRef<"Components", 'Int'>
    readonly title: FieldRef<"Components", 'String'>
    readonly component_photo: FieldRef<"Components", 'String'>
    readonly description: FieldRef<"Components", 'String'>
    readonly documentation_name: FieldRef<"Components", 'String'>
    readonly subtype_id: FieldRef<"Components", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Components findUnique
   */
  export type ComponentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * Filter, which Components to fetch.
     */
    where: ComponentsWhereUniqueInput
  }

  /**
   * Components findUniqueOrThrow
   */
  export type ComponentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * Filter, which Components to fetch.
     */
    where: ComponentsWhereUniqueInput
  }

  /**
   * Components findFirst
   */
  export type ComponentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * Filter, which Components to fetch.
     */
    where?: ComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentsOrderByWithRelationInput | ComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Components.
     */
    cursor?: ComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Components.
     */
    distinct?: ComponentsScalarFieldEnum | ComponentsScalarFieldEnum[]
  }

  /**
   * Components findFirstOrThrow
   */
  export type ComponentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * Filter, which Components to fetch.
     */
    where?: ComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentsOrderByWithRelationInput | ComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Components.
     */
    cursor?: ComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Components.
     */
    distinct?: ComponentsScalarFieldEnum | ComponentsScalarFieldEnum[]
  }

  /**
   * Components findMany
   */
  export type ComponentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * Filter, which Components to fetch.
     */
    where?: ComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentsOrderByWithRelationInput | ComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Components.
     */
    cursor?: ComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    distinct?: ComponentsScalarFieldEnum | ComponentsScalarFieldEnum[]
  }

  /**
   * Components create
   */
  export type ComponentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Components.
     */
    data: XOR<ComponentsCreateInput, ComponentsUncheckedCreateInput>
  }

  /**
   * Components createMany
   */
  export type ComponentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Components.
     */
    data: ComponentsCreateManyInput | ComponentsCreateManyInput[]
  }

  /**
   * Components createManyAndReturn
   */
  export type ComponentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Components.
     */
    data: ComponentsCreateManyInput | ComponentsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Components update
   */
  export type ComponentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Components.
     */
    data: XOR<ComponentsUpdateInput, ComponentsUncheckedUpdateInput>
    /**
     * Choose, which Components to update.
     */
    where: ComponentsWhereUniqueInput
  }

  /**
   * Components updateMany
   */
  export type ComponentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Components.
     */
    data: XOR<ComponentsUpdateManyMutationInput, ComponentsUncheckedUpdateManyInput>
    /**
     * Filter which Components to update
     */
    where?: ComponentsWhereInput
  }

  /**
   * Components upsert
   */
  export type ComponentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Components to update in case it exists.
     */
    where: ComponentsWhereUniqueInput
    /**
     * In case the Components found by the `where` argument doesn't exist, create a new Components with this data.
     */
    create: XOR<ComponentsCreateInput, ComponentsUncheckedCreateInput>
    /**
     * In case the Components was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentsUpdateInput, ComponentsUncheckedUpdateInput>
  }

  /**
   * Components delete
   */
  export type ComponentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    /**
     * Filter which Components to delete.
     */
    where: ComponentsWhereUniqueInput
  }

  /**
   * Components deleteMany
   */
  export type ComponentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Components to delete
     */
    where?: ComponentsWhereInput
  }

  /**
   * Components.favorite_component
   */
  export type Components$favorite_componentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    where?: FavoriteComponentsWhereInput
    orderBy?: FavoriteComponentsOrderByWithRelationInput | FavoriteComponentsOrderByWithRelationInput[]
    cursor?: FavoriteComponentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteComponentsScalarFieldEnum | FavoriteComponentsScalarFieldEnum[]
  }

  /**
   * Components.component_properties
   */
  export type Components$component_propertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    where?: ComponentPropertiesWhereInput
    orderBy?: ComponentPropertiesOrderByWithRelationInput | ComponentPropertiesOrderByWithRelationInput[]
    cursor?: ComponentPropertiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentPropertiesScalarFieldEnum | ComponentPropertiesScalarFieldEnum[]
  }

  /**
   * Components without action
   */
  export type ComponentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteComponents
   */

  export type AggregateFavoriteComponents = {
    _count: FavoriteComponentsCountAggregateOutputType | null
    _avg: FavoriteComponentsAvgAggregateOutputType | null
    _sum: FavoriteComponentsSumAggregateOutputType | null
    _min: FavoriteComponentsMinAggregateOutputType | null
    _max: FavoriteComponentsMaxAggregateOutputType | null
  }

  export type FavoriteComponentsAvgAggregateOutputType = {
    user_id: number | null
    component_id: number | null
  }

  export type FavoriteComponentsSumAggregateOutputType = {
    user_id: number | null
    component_id: number | null
  }

  export type FavoriteComponentsMinAggregateOutputType = {
    user_id: number | null
    component_id: number | null
  }

  export type FavoriteComponentsMaxAggregateOutputType = {
    user_id: number | null
    component_id: number | null
  }

  export type FavoriteComponentsCountAggregateOutputType = {
    user_id: number
    component_id: number
    _all: number
  }


  export type FavoriteComponentsAvgAggregateInputType = {
    user_id?: true
    component_id?: true
  }

  export type FavoriteComponentsSumAggregateInputType = {
    user_id?: true
    component_id?: true
  }

  export type FavoriteComponentsMinAggregateInputType = {
    user_id?: true
    component_id?: true
  }

  export type FavoriteComponentsMaxAggregateInputType = {
    user_id?: true
    component_id?: true
  }

  export type FavoriteComponentsCountAggregateInputType = {
    user_id?: true
    component_id?: true
    _all?: true
  }

  export type FavoriteComponentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteComponents to aggregate.
     */
    where?: FavoriteComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteComponents to fetch.
     */
    orderBy?: FavoriteComponentsOrderByWithRelationInput | FavoriteComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteComponents
    **/
    _count?: true | FavoriteComponentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteComponentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteComponentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteComponentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteComponentsMaxAggregateInputType
  }

  export type GetFavoriteComponentsAggregateType<T extends FavoriteComponentsAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteComponents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteComponents[P]>
      : GetScalarType<T[P], AggregateFavoriteComponents[P]>
  }




  export type FavoriteComponentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteComponentsWhereInput
    orderBy?: FavoriteComponentsOrderByWithAggregationInput | FavoriteComponentsOrderByWithAggregationInput[]
    by: FavoriteComponentsScalarFieldEnum[] | FavoriteComponentsScalarFieldEnum
    having?: FavoriteComponentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteComponentsCountAggregateInputType | true
    _avg?: FavoriteComponentsAvgAggregateInputType
    _sum?: FavoriteComponentsSumAggregateInputType
    _min?: FavoriteComponentsMinAggregateInputType
    _max?: FavoriteComponentsMaxAggregateInputType
  }

  export type FavoriteComponentsGroupByOutputType = {
    user_id: number
    component_id: number
    _count: FavoriteComponentsCountAggregateOutputType | null
    _avg: FavoriteComponentsAvgAggregateOutputType | null
    _sum: FavoriteComponentsSumAggregateOutputType | null
    _min: FavoriteComponentsMinAggregateOutputType | null
    _max: FavoriteComponentsMaxAggregateOutputType | null
  }

  type GetFavoriteComponentsGroupByPayload<T extends FavoriteComponentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteComponentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteComponentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteComponentsGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteComponentsGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteComponentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    component_id?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteComponents"]>

  export type FavoriteComponentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    component_id?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteComponents"]>

  export type FavoriteComponentsSelectScalar = {
    user_id?: boolean
    component_id?: boolean
  }

  export type FavoriteComponentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }
  export type FavoriteComponentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }

  export type $FavoriteComponentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteComponents"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      component: Prisma.$ComponentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      component_id: number
    }, ExtArgs["result"]["favoriteComponents"]>
    composites: {}
  }

  type FavoriteComponentsGetPayload<S extends boolean | null | undefined | FavoriteComponentsDefaultArgs> = $Result.GetResult<Prisma.$FavoriteComponentsPayload, S>

  type FavoriteComponentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteComponentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteComponentsCountAggregateInputType | true
    }

  export interface FavoriteComponentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteComponents'], meta: { name: 'FavoriteComponents' } }
    /**
     * Find zero or one FavoriteComponents that matches the filter.
     * @param {FavoriteComponentsFindUniqueArgs} args - Arguments to find a FavoriteComponents
     * @example
     * // Get one FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteComponentsFindUniqueArgs>(args: SelectSubset<T, FavoriteComponentsFindUniqueArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FavoriteComponents that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteComponentsFindUniqueOrThrowArgs} args - Arguments to find a FavoriteComponents
     * @example
     * // Get one FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteComponentsFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteComponentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FavoriteComponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteComponentsFindFirstArgs} args - Arguments to find a FavoriteComponents
     * @example
     * // Get one FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteComponentsFindFirstArgs>(args?: SelectSubset<T, FavoriteComponentsFindFirstArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FavoriteComponents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteComponentsFindFirstOrThrowArgs} args - Arguments to find a FavoriteComponents
     * @example
     * // Get one FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteComponentsFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteComponentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FavoriteComponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteComponentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.findMany()
     * 
     * // Get first 10 FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const favoriteComponentsWithUser_idOnly = await prisma.favoriteComponents.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends FavoriteComponentsFindManyArgs>(args?: SelectSubset<T, FavoriteComponentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FavoriteComponents.
     * @param {FavoriteComponentsCreateArgs} args - Arguments to create a FavoriteComponents.
     * @example
     * // Create one FavoriteComponents
     * const FavoriteComponents = await prisma.favoriteComponents.create({
     *   data: {
     *     // ... data to create a FavoriteComponents
     *   }
     * })
     * 
     */
    create<T extends FavoriteComponentsCreateArgs>(args: SelectSubset<T, FavoriteComponentsCreateArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FavoriteComponents.
     * @param {FavoriteComponentsCreateManyArgs} args - Arguments to create many FavoriteComponents.
     * @example
     * // Create many FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteComponentsCreateManyArgs>(args?: SelectSubset<T, FavoriteComponentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteComponents and returns the data saved in the database.
     * @param {FavoriteComponentsCreateManyAndReturnArgs} args - Arguments to create many FavoriteComponents.
     * @example
     * // Create many FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteComponents and only return the `user_id`
     * const favoriteComponentsWithUser_idOnly = await prisma.favoriteComponents.createManyAndReturn({ 
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteComponentsCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteComponentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FavoriteComponents.
     * @param {FavoriteComponentsDeleteArgs} args - Arguments to delete one FavoriteComponents.
     * @example
     * // Delete one FavoriteComponents
     * const FavoriteComponents = await prisma.favoriteComponents.delete({
     *   where: {
     *     // ... filter to delete one FavoriteComponents
     *   }
     * })
     * 
     */
    delete<T extends FavoriteComponentsDeleteArgs>(args: SelectSubset<T, FavoriteComponentsDeleteArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FavoriteComponents.
     * @param {FavoriteComponentsUpdateArgs} args - Arguments to update one FavoriteComponents.
     * @example
     * // Update one FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteComponentsUpdateArgs>(args: SelectSubset<T, FavoriteComponentsUpdateArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FavoriteComponents.
     * @param {FavoriteComponentsDeleteManyArgs} args - Arguments to filter FavoriteComponents to delete.
     * @example
     * // Delete a few FavoriteComponents
     * const { count } = await prisma.favoriteComponents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteComponentsDeleteManyArgs>(args?: SelectSubset<T, FavoriteComponentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteComponentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteComponentsUpdateManyArgs>(args: SelectSubset<T, FavoriteComponentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteComponents.
     * @param {FavoriteComponentsUpsertArgs} args - Arguments to update or create a FavoriteComponents.
     * @example
     * // Update or create a FavoriteComponents
     * const favoriteComponents = await prisma.favoriteComponents.upsert({
     *   create: {
     *     // ... data to create a FavoriteComponents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteComponents we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteComponentsUpsertArgs>(args: SelectSubset<T, FavoriteComponentsUpsertArgs<ExtArgs>>): Prisma__FavoriteComponentsClient<$Result.GetResult<Prisma.$FavoriteComponentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FavoriteComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteComponentsCountArgs} args - Arguments to filter FavoriteComponents to count.
     * @example
     * // Count the number of FavoriteComponents
     * const count = await prisma.favoriteComponents.count({
     *   where: {
     *     // ... the filter for the FavoriteComponents we want to count
     *   }
     * })
    **/
    count<T extends FavoriteComponentsCountArgs>(
      args?: Subset<T, FavoriteComponentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteComponentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteComponentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteComponentsAggregateArgs>(args: Subset<T, FavoriteComponentsAggregateArgs>): Prisma.PrismaPromise<GetFavoriteComponentsAggregateType<T>>

    /**
     * Group by FavoriteComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteComponentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteComponentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteComponentsGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteComponentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteComponentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteComponentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteComponents model
   */
  readonly fields: FavoriteComponentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteComponents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteComponentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    component<T extends ComponentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentsDefaultArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteComponents model
   */ 
  interface FavoriteComponentsFieldRefs {
    readonly user_id: FieldRef<"FavoriteComponents", 'Int'>
    readonly component_id: FieldRef<"FavoriteComponents", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteComponents findUnique
   */
  export type FavoriteComponentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteComponents to fetch.
     */
    where: FavoriteComponentsWhereUniqueInput
  }

  /**
   * FavoriteComponents findUniqueOrThrow
   */
  export type FavoriteComponentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteComponents to fetch.
     */
    where: FavoriteComponentsWhereUniqueInput
  }

  /**
   * FavoriteComponents findFirst
   */
  export type FavoriteComponentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteComponents to fetch.
     */
    where?: FavoriteComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteComponents to fetch.
     */
    orderBy?: FavoriteComponentsOrderByWithRelationInput | FavoriteComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteComponents.
     */
    cursor?: FavoriteComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteComponents.
     */
    distinct?: FavoriteComponentsScalarFieldEnum | FavoriteComponentsScalarFieldEnum[]
  }

  /**
   * FavoriteComponents findFirstOrThrow
   */
  export type FavoriteComponentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteComponents to fetch.
     */
    where?: FavoriteComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteComponents to fetch.
     */
    orderBy?: FavoriteComponentsOrderByWithRelationInput | FavoriteComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteComponents.
     */
    cursor?: FavoriteComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteComponents.
     */
    distinct?: FavoriteComponentsScalarFieldEnum | FavoriteComponentsScalarFieldEnum[]
  }

  /**
   * FavoriteComponents findMany
   */
  export type FavoriteComponentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteComponents to fetch.
     */
    where?: FavoriteComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteComponents to fetch.
     */
    orderBy?: FavoriteComponentsOrderByWithRelationInput | FavoriteComponentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteComponents.
     */
    cursor?: FavoriteComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteComponents.
     */
    skip?: number
    distinct?: FavoriteComponentsScalarFieldEnum | FavoriteComponentsScalarFieldEnum[]
  }

  /**
   * FavoriteComponents create
   */
  export type FavoriteComponentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteComponents.
     */
    data: XOR<FavoriteComponentsCreateInput, FavoriteComponentsUncheckedCreateInput>
  }

  /**
   * FavoriteComponents createMany
   */
  export type FavoriteComponentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteComponents.
     */
    data: FavoriteComponentsCreateManyInput | FavoriteComponentsCreateManyInput[]
  }

  /**
   * FavoriteComponents createManyAndReturn
   */
  export type FavoriteComponentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FavoriteComponents.
     */
    data: FavoriteComponentsCreateManyInput | FavoriteComponentsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteComponents update
   */
  export type FavoriteComponentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteComponents.
     */
    data: XOR<FavoriteComponentsUpdateInput, FavoriteComponentsUncheckedUpdateInput>
    /**
     * Choose, which FavoriteComponents to update.
     */
    where: FavoriteComponentsWhereUniqueInput
  }

  /**
   * FavoriteComponents updateMany
   */
  export type FavoriteComponentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteComponents.
     */
    data: XOR<FavoriteComponentsUpdateManyMutationInput, FavoriteComponentsUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteComponents to update
     */
    where?: FavoriteComponentsWhereInput
  }

  /**
   * FavoriteComponents upsert
   */
  export type FavoriteComponentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteComponents to update in case it exists.
     */
    where: FavoriteComponentsWhereUniqueInput
    /**
     * In case the FavoriteComponents found by the `where` argument doesn't exist, create a new FavoriteComponents with this data.
     */
    create: XOR<FavoriteComponentsCreateInput, FavoriteComponentsUncheckedCreateInput>
    /**
     * In case the FavoriteComponents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteComponentsUpdateInput, FavoriteComponentsUncheckedUpdateInput>
  }

  /**
   * FavoriteComponents delete
   */
  export type FavoriteComponentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
    /**
     * Filter which FavoriteComponents to delete.
     */
    where: FavoriteComponentsWhereUniqueInput
  }

  /**
   * FavoriteComponents deleteMany
   */
  export type FavoriteComponentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteComponents to delete
     */
    where?: FavoriteComponentsWhereInput
  }

  /**
   * FavoriteComponents without action
   */
  export type FavoriteComponentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteComponents
     */
    select?: FavoriteComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteComponentsInclude<ExtArgs> | null
  }


  /**
   * Model ComponentProperties
   */

  export type AggregateComponentProperties = {
    _count: ComponentPropertiesCountAggregateOutputType | null
    _avg: ComponentPropertiesAvgAggregateOutputType | null
    _sum: ComponentPropertiesSumAggregateOutputType | null
    _min: ComponentPropertiesMinAggregateOutputType | null
    _max: ComponentPropertiesMaxAggregateOutputType | null
  }

  export type ComponentPropertiesAvgAggregateOutputType = {
    id: number | null
    component_id: number | null
  }

  export type ComponentPropertiesSumAggregateOutputType = {
    id: number | null
    component_id: number | null
  }

  export type ComponentPropertiesMinAggregateOutputType = {
    id: number | null
    property_name: string | null
    property_value: string | null
    component_id: number | null
  }

  export type ComponentPropertiesMaxAggregateOutputType = {
    id: number | null
    property_name: string | null
    property_value: string | null
    component_id: number | null
  }

  export type ComponentPropertiesCountAggregateOutputType = {
    id: number
    property_name: number
    property_value: number
    component_id: number
    _all: number
  }


  export type ComponentPropertiesAvgAggregateInputType = {
    id?: true
    component_id?: true
  }

  export type ComponentPropertiesSumAggregateInputType = {
    id?: true
    component_id?: true
  }

  export type ComponentPropertiesMinAggregateInputType = {
    id?: true
    property_name?: true
    property_value?: true
    component_id?: true
  }

  export type ComponentPropertiesMaxAggregateInputType = {
    id?: true
    property_name?: true
    property_value?: true
    component_id?: true
  }

  export type ComponentPropertiesCountAggregateInputType = {
    id?: true
    property_name?: true
    property_value?: true
    component_id?: true
    _all?: true
  }

  export type ComponentPropertiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentProperties to aggregate.
     */
    where?: ComponentPropertiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProperties to fetch.
     */
    orderBy?: ComponentPropertiesOrderByWithRelationInput | ComponentPropertiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentPropertiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentProperties
    **/
    _count?: true | ComponentPropertiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentPropertiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentPropertiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentPropertiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentPropertiesMaxAggregateInputType
  }

  export type GetComponentPropertiesAggregateType<T extends ComponentPropertiesAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentProperties]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentProperties[P]>
      : GetScalarType<T[P], AggregateComponentProperties[P]>
  }




  export type ComponentPropertiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentPropertiesWhereInput
    orderBy?: ComponentPropertiesOrderByWithAggregationInput | ComponentPropertiesOrderByWithAggregationInput[]
    by: ComponentPropertiesScalarFieldEnum[] | ComponentPropertiesScalarFieldEnum
    having?: ComponentPropertiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentPropertiesCountAggregateInputType | true
    _avg?: ComponentPropertiesAvgAggregateInputType
    _sum?: ComponentPropertiesSumAggregateInputType
    _min?: ComponentPropertiesMinAggregateInputType
    _max?: ComponentPropertiesMaxAggregateInputType
  }

  export type ComponentPropertiesGroupByOutputType = {
    id: number
    property_name: string
    property_value: string
    component_id: number
    _count: ComponentPropertiesCountAggregateOutputType | null
    _avg: ComponentPropertiesAvgAggregateOutputType | null
    _sum: ComponentPropertiesSumAggregateOutputType | null
    _min: ComponentPropertiesMinAggregateOutputType | null
    _max: ComponentPropertiesMaxAggregateOutputType | null
  }

  type GetComponentPropertiesGroupByPayload<T extends ComponentPropertiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentPropertiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentPropertiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentPropertiesGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentPropertiesGroupByOutputType[P]>
        }
      >
    >


  export type ComponentPropertiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    property_name?: boolean
    property_value?: boolean
    component_id?: boolean
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentProperties"]>

  export type ComponentPropertiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    property_name?: boolean
    property_value?: boolean
    component_id?: boolean
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentProperties"]>

  export type ComponentPropertiesSelectScalar = {
    id?: boolean
    property_name?: boolean
    property_value?: boolean
    component_id?: boolean
  }

  export type ComponentPropertiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }
  export type ComponentPropertiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | ComponentsDefaultArgs<ExtArgs>
  }

  export type $ComponentPropertiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentProperties"
    objects: {
      component: Prisma.$ComponentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      property_name: string
      property_value: string
      component_id: number
    }, ExtArgs["result"]["componentProperties"]>
    composites: {}
  }

  type ComponentPropertiesGetPayload<S extends boolean | null | undefined | ComponentPropertiesDefaultArgs> = $Result.GetResult<Prisma.$ComponentPropertiesPayload, S>

  type ComponentPropertiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentPropertiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentPropertiesCountAggregateInputType | true
    }

  export interface ComponentPropertiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentProperties'], meta: { name: 'ComponentProperties' } }
    /**
     * Find zero or one ComponentProperties that matches the filter.
     * @param {ComponentPropertiesFindUniqueArgs} args - Arguments to find a ComponentProperties
     * @example
     * // Get one ComponentProperties
     * const componentProperties = await prisma.componentProperties.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentPropertiesFindUniqueArgs>(args: SelectSubset<T, ComponentPropertiesFindUniqueArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComponentProperties that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentPropertiesFindUniqueOrThrowArgs} args - Arguments to find a ComponentProperties
     * @example
     * // Get one ComponentProperties
     * const componentProperties = await prisma.componentProperties.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentPropertiesFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentPropertiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComponentProperties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentPropertiesFindFirstArgs} args - Arguments to find a ComponentProperties
     * @example
     * // Get one ComponentProperties
     * const componentProperties = await prisma.componentProperties.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentPropertiesFindFirstArgs>(args?: SelectSubset<T, ComponentPropertiesFindFirstArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComponentProperties that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentPropertiesFindFirstOrThrowArgs} args - Arguments to find a ComponentProperties
     * @example
     * // Get one ComponentProperties
     * const componentProperties = await prisma.componentProperties.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentPropertiesFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentPropertiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComponentProperties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentPropertiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentProperties
     * const componentProperties = await prisma.componentProperties.findMany()
     * 
     * // Get first 10 ComponentProperties
     * const componentProperties = await prisma.componentProperties.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentPropertiesWithIdOnly = await prisma.componentProperties.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentPropertiesFindManyArgs>(args?: SelectSubset<T, ComponentPropertiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComponentProperties.
     * @param {ComponentPropertiesCreateArgs} args - Arguments to create a ComponentProperties.
     * @example
     * // Create one ComponentProperties
     * const ComponentProperties = await prisma.componentProperties.create({
     *   data: {
     *     // ... data to create a ComponentProperties
     *   }
     * })
     * 
     */
    create<T extends ComponentPropertiesCreateArgs>(args: SelectSubset<T, ComponentPropertiesCreateArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComponentProperties.
     * @param {ComponentPropertiesCreateManyArgs} args - Arguments to create many ComponentProperties.
     * @example
     * // Create many ComponentProperties
     * const componentProperties = await prisma.componentProperties.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentPropertiesCreateManyArgs>(args?: SelectSubset<T, ComponentPropertiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComponentProperties and returns the data saved in the database.
     * @param {ComponentPropertiesCreateManyAndReturnArgs} args - Arguments to create many ComponentProperties.
     * @example
     * // Create many ComponentProperties
     * const componentProperties = await prisma.componentProperties.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComponentProperties and only return the `id`
     * const componentPropertiesWithIdOnly = await prisma.componentProperties.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentPropertiesCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentPropertiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ComponentProperties.
     * @param {ComponentPropertiesDeleteArgs} args - Arguments to delete one ComponentProperties.
     * @example
     * // Delete one ComponentProperties
     * const ComponentProperties = await prisma.componentProperties.delete({
     *   where: {
     *     // ... filter to delete one ComponentProperties
     *   }
     * })
     * 
     */
    delete<T extends ComponentPropertiesDeleteArgs>(args: SelectSubset<T, ComponentPropertiesDeleteArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComponentProperties.
     * @param {ComponentPropertiesUpdateArgs} args - Arguments to update one ComponentProperties.
     * @example
     * // Update one ComponentProperties
     * const componentProperties = await prisma.componentProperties.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentPropertiesUpdateArgs>(args: SelectSubset<T, ComponentPropertiesUpdateArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComponentProperties.
     * @param {ComponentPropertiesDeleteManyArgs} args - Arguments to filter ComponentProperties to delete.
     * @example
     * // Delete a few ComponentProperties
     * const { count } = await prisma.componentProperties.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentPropertiesDeleteManyArgs>(args?: SelectSubset<T, ComponentPropertiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentPropertiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentProperties
     * const componentProperties = await prisma.componentProperties.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentPropertiesUpdateManyArgs>(args: SelectSubset<T, ComponentPropertiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentProperties.
     * @param {ComponentPropertiesUpsertArgs} args - Arguments to update or create a ComponentProperties.
     * @example
     * // Update or create a ComponentProperties
     * const componentProperties = await prisma.componentProperties.upsert({
     *   create: {
     *     // ... data to create a ComponentProperties
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentProperties we want to update
     *   }
     * })
     */
    upsert<T extends ComponentPropertiesUpsertArgs>(args: SelectSubset<T, ComponentPropertiesUpsertArgs<ExtArgs>>): Prisma__ComponentPropertiesClient<$Result.GetResult<Prisma.$ComponentPropertiesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComponentProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentPropertiesCountArgs} args - Arguments to filter ComponentProperties to count.
     * @example
     * // Count the number of ComponentProperties
     * const count = await prisma.componentProperties.count({
     *   where: {
     *     // ... the filter for the ComponentProperties we want to count
     *   }
     * })
    **/
    count<T extends ComponentPropertiesCountArgs>(
      args?: Subset<T, ComponentPropertiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentPropertiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentPropertiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentPropertiesAggregateArgs>(args: Subset<T, ComponentPropertiesAggregateArgs>): Prisma.PrismaPromise<GetComponentPropertiesAggregateType<T>>

    /**
     * Group by ComponentProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentPropertiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentPropertiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentPropertiesGroupByArgs['orderBy'] }
        : { orderBy?: ComponentPropertiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentPropertiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentPropertiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentProperties model
   */
  readonly fields: ComponentPropertiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentProperties.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentPropertiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    component<T extends ComponentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentsDefaultArgs<ExtArgs>>): Prisma__ComponentsClient<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentProperties model
   */ 
  interface ComponentPropertiesFieldRefs {
    readonly id: FieldRef<"ComponentProperties", 'Int'>
    readonly property_name: FieldRef<"ComponentProperties", 'String'>
    readonly property_value: FieldRef<"ComponentProperties", 'String'>
    readonly component_id: FieldRef<"ComponentProperties", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ComponentProperties findUnique
   */
  export type ComponentPropertiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProperties to fetch.
     */
    where: ComponentPropertiesWhereUniqueInput
  }

  /**
   * ComponentProperties findUniqueOrThrow
   */
  export type ComponentPropertiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProperties to fetch.
     */
    where: ComponentPropertiesWhereUniqueInput
  }

  /**
   * ComponentProperties findFirst
   */
  export type ComponentPropertiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProperties to fetch.
     */
    where?: ComponentPropertiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProperties to fetch.
     */
    orderBy?: ComponentPropertiesOrderByWithRelationInput | ComponentPropertiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentProperties.
     */
    cursor?: ComponentPropertiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentProperties.
     */
    distinct?: ComponentPropertiesScalarFieldEnum | ComponentPropertiesScalarFieldEnum[]
  }

  /**
   * ComponentProperties findFirstOrThrow
   */
  export type ComponentPropertiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProperties to fetch.
     */
    where?: ComponentPropertiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProperties to fetch.
     */
    orderBy?: ComponentPropertiesOrderByWithRelationInput | ComponentPropertiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentProperties.
     */
    cursor?: ComponentPropertiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentProperties.
     */
    distinct?: ComponentPropertiesScalarFieldEnum | ComponentPropertiesScalarFieldEnum[]
  }

  /**
   * ComponentProperties findMany
   */
  export type ComponentPropertiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProperties to fetch.
     */
    where?: ComponentPropertiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProperties to fetch.
     */
    orderBy?: ComponentPropertiesOrderByWithRelationInput | ComponentPropertiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentProperties.
     */
    cursor?: ComponentPropertiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProperties.
     */
    skip?: number
    distinct?: ComponentPropertiesScalarFieldEnum | ComponentPropertiesScalarFieldEnum[]
  }

  /**
   * ComponentProperties create
   */
  export type ComponentPropertiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentProperties.
     */
    data: XOR<ComponentPropertiesCreateInput, ComponentPropertiesUncheckedCreateInput>
  }

  /**
   * ComponentProperties createMany
   */
  export type ComponentPropertiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentProperties.
     */
    data: ComponentPropertiesCreateManyInput | ComponentPropertiesCreateManyInput[]
  }

  /**
   * ComponentProperties createManyAndReturn
   */
  export type ComponentPropertiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ComponentProperties.
     */
    data: ComponentPropertiesCreateManyInput | ComponentPropertiesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentProperties update
   */
  export type ComponentPropertiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentProperties.
     */
    data: XOR<ComponentPropertiesUpdateInput, ComponentPropertiesUncheckedUpdateInput>
    /**
     * Choose, which ComponentProperties to update.
     */
    where: ComponentPropertiesWhereUniqueInput
  }

  /**
   * ComponentProperties updateMany
   */
  export type ComponentPropertiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentProperties.
     */
    data: XOR<ComponentPropertiesUpdateManyMutationInput, ComponentPropertiesUncheckedUpdateManyInput>
    /**
     * Filter which ComponentProperties to update
     */
    where?: ComponentPropertiesWhereInput
  }

  /**
   * ComponentProperties upsert
   */
  export type ComponentPropertiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentProperties to update in case it exists.
     */
    where: ComponentPropertiesWhereUniqueInput
    /**
     * In case the ComponentProperties found by the `where` argument doesn't exist, create a new ComponentProperties with this data.
     */
    create: XOR<ComponentPropertiesCreateInput, ComponentPropertiesUncheckedCreateInput>
    /**
     * In case the ComponentProperties was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentPropertiesUpdateInput, ComponentPropertiesUncheckedUpdateInput>
  }

  /**
   * ComponentProperties delete
   */
  export type ComponentPropertiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
    /**
     * Filter which ComponentProperties to delete.
     */
    where: ComponentPropertiesWhereUniqueInput
  }

  /**
   * ComponentProperties deleteMany
   */
  export type ComponentPropertiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentProperties to delete
     */
    where?: ComponentPropertiesWhereInput
  }

  /**
   * ComponentProperties without action
   */
  export type ComponentPropertiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProperties
     */
    select?: ComponentPropertiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentPropertiesInclude<ExtArgs> | null
  }


  /**
   * Model ComponentSubtype
   */

  export type AggregateComponentSubtype = {
    _count: ComponentSubtypeCountAggregateOutputType | null
    _avg: ComponentSubtypeAvgAggregateOutputType | null
    _sum: ComponentSubtypeSumAggregateOutputType | null
    _min: ComponentSubtypeMinAggregateOutputType | null
    _max: ComponentSubtypeMaxAggregateOutputType | null
  }

  export type ComponentSubtypeAvgAggregateOutputType = {
    id: number | null
    type_id: number | null
  }

  export type ComponentSubtypeSumAggregateOutputType = {
    id: number | null
    type_id: number | null
  }

  export type ComponentSubtypeMinAggregateOutputType = {
    id: number | null
    subtype_name: string | null
    type_id: number | null
  }

  export type ComponentSubtypeMaxAggregateOutputType = {
    id: number | null
    subtype_name: string | null
    type_id: number | null
  }

  export type ComponentSubtypeCountAggregateOutputType = {
    id: number
    subtype_name: number
    type_id: number
    _all: number
  }


  export type ComponentSubtypeAvgAggregateInputType = {
    id?: true
    type_id?: true
  }

  export type ComponentSubtypeSumAggregateInputType = {
    id?: true
    type_id?: true
  }

  export type ComponentSubtypeMinAggregateInputType = {
    id?: true
    subtype_name?: true
    type_id?: true
  }

  export type ComponentSubtypeMaxAggregateInputType = {
    id?: true
    subtype_name?: true
    type_id?: true
  }

  export type ComponentSubtypeCountAggregateInputType = {
    id?: true
    subtype_name?: true
    type_id?: true
    _all?: true
  }

  export type ComponentSubtypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentSubtype to aggregate.
     */
    where?: ComponentSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSubtypes to fetch.
     */
    orderBy?: ComponentSubtypeOrderByWithRelationInput | ComponentSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentSubtypes
    **/
    _count?: true | ComponentSubtypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentSubtypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentSubtypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentSubtypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentSubtypeMaxAggregateInputType
  }

  export type GetComponentSubtypeAggregateType<T extends ComponentSubtypeAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentSubtype]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentSubtype[P]>
      : GetScalarType<T[P], AggregateComponentSubtype[P]>
  }




  export type ComponentSubtypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentSubtypeWhereInput
    orderBy?: ComponentSubtypeOrderByWithAggregationInput | ComponentSubtypeOrderByWithAggregationInput[]
    by: ComponentSubtypeScalarFieldEnum[] | ComponentSubtypeScalarFieldEnum
    having?: ComponentSubtypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentSubtypeCountAggregateInputType | true
    _avg?: ComponentSubtypeAvgAggregateInputType
    _sum?: ComponentSubtypeSumAggregateInputType
    _min?: ComponentSubtypeMinAggregateInputType
    _max?: ComponentSubtypeMaxAggregateInputType
  }

  export type ComponentSubtypeGroupByOutputType = {
    id: number
    subtype_name: string
    type_id: number | null
    _count: ComponentSubtypeCountAggregateOutputType | null
    _avg: ComponentSubtypeAvgAggregateOutputType | null
    _sum: ComponentSubtypeSumAggregateOutputType | null
    _min: ComponentSubtypeMinAggregateOutputType | null
    _max: ComponentSubtypeMaxAggregateOutputType | null
  }

  type GetComponentSubtypeGroupByPayload<T extends ComponentSubtypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentSubtypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentSubtypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentSubtypeGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentSubtypeGroupByOutputType[P]>
        }
      >
    >


  export type ComponentSubtypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subtype_name?: boolean
    type_id?: boolean
    type?: boolean | ComponentSubtype$typeArgs<ExtArgs>
    components?: boolean | ComponentSubtype$componentsArgs<ExtArgs>
    _count?: boolean | ComponentSubtypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentSubtype"]>

  export type ComponentSubtypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subtype_name?: boolean
    type_id?: boolean
    type?: boolean | ComponentSubtype$typeArgs<ExtArgs>
  }, ExtArgs["result"]["componentSubtype"]>

  export type ComponentSubtypeSelectScalar = {
    id?: boolean
    subtype_name?: boolean
    type_id?: boolean
  }

  export type ComponentSubtypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | ComponentSubtype$typeArgs<ExtArgs>
    components?: boolean | ComponentSubtype$componentsArgs<ExtArgs>
    _count?: boolean | ComponentSubtypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ComponentSubtypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | ComponentSubtype$typeArgs<ExtArgs>
  }

  export type $ComponentSubtypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentSubtype"
    objects: {
      type: Prisma.$ComponentTypePayload<ExtArgs> | null
      components: Prisma.$ComponentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subtype_name: string
      type_id: number | null
    }, ExtArgs["result"]["componentSubtype"]>
    composites: {}
  }

  type ComponentSubtypeGetPayload<S extends boolean | null | undefined | ComponentSubtypeDefaultArgs> = $Result.GetResult<Prisma.$ComponentSubtypePayload, S>

  type ComponentSubtypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentSubtypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentSubtypeCountAggregateInputType | true
    }

  export interface ComponentSubtypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentSubtype'], meta: { name: 'ComponentSubtype' } }
    /**
     * Find zero or one ComponentSubtype that matches the filter.
     * @param {ComponentSubtypeFindUniqueArgs} args - Arguments to find a ComponentSubtype
     * @example
     * // Get one ComponentSubtype
     * const componentSubtype = await prisma.componentSubtype.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentSubtypeFindUniqueArgs>(args: SelectSubset<T, ComponentSubtypeFindUniqueArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComponentSubtype that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentSubtypeFindUniqueOrThrowArgs} args - Arguments to find a ComponentSubtype
     * @example
     * // Get one ComponentSubtype
     * const componentSubtype = await prisma.componentSubtype.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentSubtypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentSubtypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComponentSubtype that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSubtypeFindFirstArgs} args - Arguments to find a ComponentSubtype
     * @example
     * // Get one ComponentSubtype
     * const componentSubtype = await prisma.componentSubtype.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentSubtypeFindFirstArgs>(args?: SelectSubset<T, ComponentSubtypeFindFirstArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComponentSubtype that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSubtypeFindFirstOrThrowArgs} args - Arguments to find a ComponentSubtype
     * @example
     * // Get one ComponentSubtype
     * const componentSubtype = await prisma.componentSubtype.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentSubtypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentSubtypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComponentSubtypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSubtypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentSubtypes
     * const componentSubtypes = await prisma.componentSubtype.findMany()
     * 
     * // Get first 10 ComponentSubtypes
     * const componentSubtypes = await prisma.componentSubtype.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentSubtypeWithIdOnly = await prisma.componentSubtype.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentSubtypeFindManyArgs>(args?: SelectSubset<T, ComponentSubtypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComponentSubtype.
     * @param {ComponentSubtypeCreateArgs} args - Arguments to create a ComponentSubtype.
     * @example
     * // Create one ComponentSubtype
     * const ComponentSubtype = await prisma.componentSubtype.create({
     *   data: {
     *     // ... data to create a ComponentSubtype
     *   }
     * })
     * 
     */
    create<T extends ComponentSubtypeCreateArgs>(args: SelectSubset<T, ComponentSubtypeCreateArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComponentSubtypes.
     * @param {ComponentSubtypeCreateManyArgs} args - Arguments to create many ComponentSubtypes.
     * @example
     * // Create many ComponentSubtypes
     * const componentSubtype = await prisma.componentSubtype.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentSubtypeCreateManyArgs>(args?: SelectSubset<T, ComponentSubtypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComponentSubtypes and returns the data saved in the database.
     * @param {ComponentSubtypeCreateManyAndReturnArgs} args - Arguments to create many ComponentSubtypes.
     * @example
     * // Create many ComponentSubtypes
     * const componentSubtype = await prisma.componentSubtype.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComponentSubtypes and only return the `id`
     * const componentSubtypeWithIdOnly = await prisma.componentSubtype.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentSubtypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentSubtypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ComponentSubtype.
     * @param {ComponentSubtypeDeleteArgs} args - Arguments to delete one ComponentSubtype.
     * @example
     * // Delete one ComponentSubtype
     * const ComponentSubtype = await prisma.componentSubtype.delete({
     *   where: {
     *     // ... filter to delete one ComponentSubtype
     *   }
     * })
     * 
     */
    delete<T extends ComponentSubtypeDeleteArgs>(args: SelectSubset<T, ComponentSubtypeDeleteArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComponentSubtype.
     * @param {ComponentSubtypeUpdateArgs} args - Arguments to update one ComponentSubtype.
     * @example
     * // Update one ComponentSubtype
     * const componentSubtype = await prisma.componentSubtype.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentSubtypeUpdateArgs>(args: SelectSubset<T, ComponentSubtypeUpdateArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComponentSubtypes.
     * @param {ComponentSubtypeDeleteManyArgs} args - Arguments to filter ComponentSubtypes to delete.
     * @example
     * // Delete a few ComponentSubtypes
     * const { count } = await prisma.componentSubtype.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentSubtypeDeleteManyArgs>(args?: SelectSubset<T, ComponentSubtypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentSubtypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSubtypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentSubtypes
     * const componentSubtype = await prisma.componentSubtype.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentSubtypeUpdateManyArgs>(args: SelectSubset<T, ComponentSubtypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentSubtype.
     * @param {ComponentSubtypeUpsertArgs} args - Arguments to update or create a ComponentSubtype.
     * @example
     * // Update or create a ComponentSubtype
     * const componentSubtype = await prisma.componentSubtype.upsert({
     *   create: {
     *     // ... data to create a ComponentSubtype
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentSubtype we want to update
     *   }
     * })
     */
    upsert<T extends ComponentSubtypeUpsertArgs>(args: SelectSubset<T, ComponentSubtypeUpsertArgs<ExtArgs>>): Prisma__ComponentSubtypeClient<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComponentSubtypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSubtypeCountArgs} args - Arguments to filter ComponentSubtypes to count.
     * @example
     * // Count the number of ComponentSubtypes
     * const count = await prisma.componentSubtype.count({
     *   where: {
     *     // ... the filter for the ComponentSubtypes we want to count
     *   }
     * })
    **/
    count<T extends ComponentSubtypeCountArgs>(
      args?: Subset<T, ComponentSubtypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentSubtypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentSubtype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSubtypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentSubtypeAggregateArgs>(args: Subset<T, ComponentSubtypeAggregateArgs>): Prisma.PrismaPromise<GetComponentSubtypeAggregateType<T>>

    /**
     * Group by ComponentSubtype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSubtypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentSubtypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentSubtypeGroupByArgs['orderBy'] }
        : { orderBy?: ComponentSubtypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentSubtypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentSubtypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentSubtype model
   */
  readonly fields: ComponentSubtypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentSubtype.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentSubtypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    type<T extends ComponentSubtype$typeArgs<ExtArgs> = {}>(args?: Subset<T, ComponentSubtype$typeArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    components<T extends ComponentSubtype$componentsArgs<ExtArgs> = {}>(args?: Subset<T, ComponentSubtype$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentSubtype model
   */ 
  interface ComponentSubtypeFieldRefs {
    readonly id: FieldRef<"ComponentSubtype", 'Int'>
    readonly subtype_name: FieldRef<"ComponentSubtype", 'String'>
    readonly type_id: FieldRef<"ComponentSubtype", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ComponentSubtype findUnique
   */
  export type ComponentSubtypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSubtype to fetch.
     */
    where: ComponentSubtypeWhereUniqueInput
  }

  /**
   * ComponentSubtype findUniqueOrThrow
   */
  export type ComponentSubtypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSubtype to fetch.
     */
    where: ComponentSubtypeWhereUniqueInput
  }

  /**
   * ComponentSubtype findFirst
   */
  export type ComponentSubtypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSubtype to fetch.
     */
    where?: ComponentSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSubtypes to fetch.
     */
    orderBy?: ComponentSubtypeOrderByWithRelationInput | ComponentSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentSubtypes.
     */
    cursor?: ComponentSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentSubtypes.
     */
    distinct?: ComponentSubtypeScalarFieldEnum | ComponentSubtypeScalarFieldEnum[]
  }

  /**
   * ComponentSubtype findFirstOrThrow
   */
  export type ComponentSubtypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSubtype to fetch.
     */
    where?: ComponentSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSubtypes to fetch.
     */
    orderBy?: ComponentSubtypeOrderByWithRelationInput | ComponentSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentSubtypes.
     */
    cursor?: ComponentSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentSubtypes.
     */
    distinct?: ComponentSubtypeScalarFieldEnum | ComponentSubtypeScalarFieldEnum[]
  }

  /**
   * ComponentSubtype findMany
   */
  export type ComponentSubtypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSubtypes to fetch.
     */
    where?: ComponentSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSubtypes to fetch.
     */
    orderBy?: ComponentSubtypeOrderByWithRelationInput | ComponentSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentSubtypes.
     */
    cursor?: ComponentSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSubtypes.
     */
    skip?: number
    distinct?: ComponentSubtypeScalarFieldEnum | ComponentSubtypeScalarFieldEnum[]
  }

  /**
   * ComponentSubtype create
   */
  export type ComponentSubtypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentSubtype.
     */
    data: XOR<ComponentSubtypeCreateInput, ComponentSubtypeUncheckedCreateInput>
  }

  /**
   * ComponentSubtype createMany
   */
  export type ComponentSubtypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentSubtypes.
     */
    data: ComponentSubtypeCreateManyInput | ComponentSubtypeCreateManyInput[]
  }

  /**
   * ComponentSubtype createManyAndReturn
   */
  export type ComponentSubtypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ComponentSubtypes.
     */
    data: ComponentSubtypeCreateManyInput | ComponentSubtypeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentSubtype update
   */
  export type ComponentSubtypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentSubtype.
     */
    data: XOR<ComponentSubtypeUpdateInput, ComponentSubtypeUncheckedUpdateInput>
    /**
     * Choose, which ComponentSubtype to update.
     */
    where: ComponentSubtypeWhereUniqueInput
  }

  /**
   * ComponentSubtype updateMany
   */
  export type ComponentSubtypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentSubtypes.
     */
    data: XOR<ComponentSubtypeUpdateManyMutationInput, ComponentSubtypeUncheckedUpdateManyInput>
    /**
     * Filter which ComponentSubtypes to update
     */
    where?: ComponentSubtypeWhereInput
  }

  /**
   * ComponentSubtype upsert
   */
  export type ComponentSubtypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentSubtype to update in case it exists.
     */
    where: ComponentSubtypeWhereUniqueInput
    /**
     * In case the ComponentSubtype found by the `where` argument doesn't exist, create a new ComponentSubtype with this data.
     */
    create: XOR<ComponentSubtypeCreateInput, ComponentSubtypeUncheckedCreateInput>
    /**
     * In case the ComponentSubtype was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentSubtypeUpdateInput, ComponentSubtypeUncheckedUpdateInput>
  }

  /**
   * ComponentSubtype delete
   */
  export type ComponentSubtypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    /**
     * Filter which ComponentSubtype to delete.
     */
    where: ComponentSubtypeWhereUniqueInput
  }

  /**
   * ComponentSubtype deleteMany
   */
  export type ComponentSubtypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentSubtypes to delete
     */
    where?: ComponentSubtypeWhereInput
  }

  /**
   * ComponentSubtype.type
   */
  export type ComponentSubtype$typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    where?: ComponentTypeWhereInput
  }

  /**
   * ComponentSubtype.components
   */
  export type ComponentSubtype$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Components
     */
    select?: ComponentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentsInclude<ExtArgs> | null
    where?: ComponentsWhereInput
    orderBy?: ComponentsOrderByWithRelationInput | ComponentsOrderByWithRelationInput[]
    cursor?: ComponentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentsScalarFieldEnum | ComponentsScalarFieldEnum[]
  }

  /**
   * ComponentSubtype without action
   */
  export type ComponentSubtypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
  }


  /**
   * Model ComponentType
   */

  export type AggregateComponentType = {
    _count: ComponentTypeCountAggregateOutputType | null
    _avg: ComponentTypeAvgAggregateOutputType | null
    _sum: ComponentTypeSumAggregateOutputType | null
    _min: ComponentTypeMinAggregateOutputType | null
    _max: ComponentTypeMaxAggregateOutputType | null
  }

  export type ComponentTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ComponentTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ComponentTypeMinAggregateOutputType = {
    id: number | null
    type_name: string | null
    type_description: string | null
    type_image: string | null
  }

  export type ComponentTypeMaxAggregateOutputType = {
    id: number | null
    type_name: string | null
    type_description: string | null
    type_image: string | null
  }

  export type ComponentTypeCountAggregateOutputType = {
    id: number
    type_name: number
    type_description: number
    type_image: number
    _all: number
  }


  export type ComponentTypeAvgAggregateInputType = {
    id?: true
  }

  export type ComponentTypeSumAggregateInputType = {
    id?: true
  }

  export type ComponentTypeMinAggregateInputType = {
    id?: true
    type_name?: true
    type_description?: true
    type_image?: true
  }

  export type ComponentTypeMaxAggregateInputType = {
    id?: true
    type_name?: true
    type_description?: true
    type_image?: true
  }

  export type ComponentTypeCountAggregateInputType = {
    id?: true
    type_name?: true
    type_description?: true
    type_image?: true
    _all?: true
  }

  export type ComponentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentType to aggregate.
     */
    where?: ComponentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTypes to fetch.
     */
    orderBy?: ComponentTypeOrderByWithRelationInput | ComponentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentTypes
    **/
    _count?: true | ComponentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentTypeMaxAggregateInputType
  }

  export type GetComponentTypeAggregateType<T extends ComponentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentType[P]>
      : GetScalarType<T[P], AggregateComponentType[P]>
  }




  export type ComponentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTypeWhereInput
    orderBy?: ComponentTypeOrderByWithAggregationInput | ComponentTypeOrderByWithAggregationInput[]
    by: ComponentTypeScalarFieldEnum[] | ComponentTypeScalarFieldEnum
    having?: ComponentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentTypeCountAggregateInputType | true
    _avg?: ComponentTypeAvgAggregateInputType
    _sum?: ComponentTypeSumAggregateInputType
    _min?: ComponentTypeMinAggregateInputType
    _max?: ComponentTypeMaxAggregateInputType
  }

  export type ComponentTypeGroupByOutputType = {
    id: number
    type_name: string
    type_description: string
    type_image: string
    _count: ComponentTypeCountAggregateOutputType | null
    _avg: ComponentTypeAvgAggregateOutputType | null
    _sum: ComponentTypeSumAggregateOutputType | null
    _min: ComponentTypeMinAggregateOutputType | null
    _max: ComponentTypeMaxAggregateOutputType | null
  }

  type GetComponentTypeGroupByPayload<T extends ComponentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentTypeGroupByOutputType[P]>
        }
      >
    >


  export type ComponentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type_name?: boolean
    type_description?: boolean
    type_image?: boolean
    subtypes?: boolean | ComponentType$subtypesArgs<ExtArgs>
    _count?: boolean | ComponentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentType"]>

  export type ComponentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type_name?: boolean
    type_description?: boolean
    type_image?: boolean
  }, ExtArgs["result"]["componentType"]>

  export type ComponentTypeSelectScalar = {
    id?: boolean
    type_name?: boolean
    type_description?: boolean
    type_image?: boolean
  }

  export type ComponentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtypes?: boolean | ComponentType$subtypesArgs<ExtArgs>
    _count?: boolean | ComponentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ComponentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ComponentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentType"
    objects: {
      subtypes: Prisma.$ComponentSubtypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type_name: string
      type_description: string
      type_image: string
    }, ExtArgs["result"]["componentType"]>
    composites: {}
  }

  type ComponentTypeGetPayload<S extends boolean | null | undefined | ComponentTypeDefaultArgs> = $Result.GetResult<Prisma.$ComponentTypePayload, S>

  type ComponentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentTypeCountAggregateInputType | true
    }

  export interface ComponentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentType'], meta: { name: 'ComponentType' } }
    /**
     * Find zero or one ComponentType that matches the filter.
     * @param {ComponentTypeFindUniqueArgs} args - Arguments to find a ComponentType
     * @example
     * // Get one ComponentType
     * const componentType = await prisma.componentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentTypeFindUniqueArgs>(args: SelectSubset<T, ComponentTypeFindUniqueArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComponentType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentTypeFindUniqueOrThrowArgs} args - Arguments to find a ComponentType
     * @example
     * // Get one ComponentType
     * const componentType = await prisma.componentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComponentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTypeFindFirstArgs} args - Arguments to find a ComponentType
     * @example
     * // Get one ComponentType
     * const componentType = await prisma.componentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentTypeFindFirstArgs>(args?: SelectSubset<T, ComponentTypeFindFirstArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComponentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTypeFindFirstOrThrowArgs} args - Arguments to find a ComponentType
     * @example
     * // Get one ComponentType
     * const componentType = await prisma.componentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComponentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentTypes
     * const componentTypes = await prisma.componentType.findMany()
     * 
     * // Get first 10 ComponentTypes
     * const componentTypes = await prisma.componentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentTypeWithIdOnly = await prisma.componentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentTypeFindManyArgs>(args?: SelectSubset<T, ComponentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComponentType.
     * @param {ComponentTypeCreateArgs} args - Arguments to create a ComponentType.
     * @example
     * // Create one ComponentType
     * const ComponentType = await prisma.componentType.create({
     *   data: {
     *     // ... data to create a ComponentType
     *   }
     * })
     * 
     */
    create<T extends ComponentTypeCreateArgs>(args: SelectSubset<T, ComponentTypeCreateArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComponentTypes.
     * @param {ComponentTypeCreateManyArgs} args - Arguments to create many ComponentTypes.
     * @example
     * // Create many ComponentTypes
     * const componentType = await prisma.componentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentTypeCreateManyArgs>(args?: SelectSubset<T, ComponentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComponentTypes and returns the data saved in the database.
     * @param {ComponentTypeCreateManyAndReturnArgs} args - Arguments to create many ComponentTypes.
     * @example
     * // Create many ComponentTypes
     * const componentType = await prisma.componentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComponentTypes and only return the `id`
     * const componentTypeWithIdOnly = await prisma.componentType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ComponentType.
     * @param {ComponentTypeDeleteArgs} args - Arguments to delete one ComponentType.
     * @example
     * // Delete one ComponentType
     * const ComponentType = await prisma.componentType.delete({
     *   where: {
     *     // ... filter to delete one ComponentType
     *   }
     * })
     * 
     */
    delete<T extends ComponentTypeDeleteArgs>(args: SelectSubset<T, ComponentTypeDeleteArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComponentType.
     * @param {ComponentTypeUpdateArgs} args - Arguments to update one ComponentType.
     * @example
     * // Update one ComponentType
     * const componentType = await prisma.componentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentTypeUpdateArgs>(args: SelectSubset<T, ComponentTypeUpdateArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComponentTypes.
     * @param {ComponentTypeDeleteManyArgs} args - Arguments to filter ComponentTypes to delete.
     * @example
     * // Delete a few ComponentTypes
     * const { count } = await prisma.componentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentTypeDeleteManyArgs>(args?: SelectSubset<T, ComponentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentTypes
     * const componentType = await prisma.componentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentTypeUpdateManyArgs>(args: SelectSubset<T, ComponentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentType.
     * @param {ComponentTypeUpsertArgs} args - Arguments to update or create a ComponentType.
     * @example
     * // Update or create a ComponentType
     * const componentType = await prisma.componentType.upsert({
     *   create: {
     *     // ... data to create a ComponentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentType we want to update
     *   }
     * })
     */
    upsert<T extends ComponentTypeUpsertArgs>(args: SelectSubset<T, ComponentTypeUpsertArgs<ExtArgs>>): Prisma__ComponentTypeClient<$Result.GetResult<Prisma.$ComponentTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComponentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTypeCountArgs} args - Arguments to filter ComponentTypes to count.
     * @example
     * // Count the number of ComponentTypes
     * const count = await prisma.componentType.count({
     *   where: {
     *     // ... the filter for the ComponentTypes we want to count
     *   }
     * })
    **/
    count<T extends ComponentTypeCountArgs>(
      args?: Subset<T, ComponentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentTypeAggregateArgs>(args: Subset<T, ComponentTypeAggregateArgs>): Prisma.PrismaPromise<GetComponentTypeAggregateType<T>>

    /**
     * Group by ComponentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentTypeGroupByArgs['orderBy'] }
        : { orderBy?: ComponentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentType model
   */
  readonly fields: ComponentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subtypes<T extends ComponentType$subtypesArgs<ExtArgs> = {}>(args?: Subset<T, ComponentType$subtypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentSubtypePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentType model
   */ 
  interface ComponentTypeFieldRefs {
    readonly id: FieldRef<"ComponentType", 'Int'>
    readonly type_name: FieldRef<"ComponentType", 'String'>
    readonly type_description: FieldRef<"ComponentType", 'String'>
    readonly type_image: FieldRef<"ComponentType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ComponentType findUnique
   */
  export type ComponentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentType to fetch.
     */
    where: ComponentTypeWhereUniqueInput
  }

  /**
   * ComponentType findUniqueOrThrow
   */
  export type ComponentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentType to fetch.
     */
    where: ComponentTypeWhereUniqueInput
  }

  /**
   * ComponentType findFirst
   */
  export type ComponentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentType to fetch.
     */
    where?: ComponentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTypes to fetch.
     */
    orderBy?: ComponentTypeOrderByWithRelationInput | ComponentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentTypes.
     */
    cursor?: ComponentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentTypes.
     */
    distinct?: ComponentTypeScalarFieldEnum | ComponentTypeScalarFieldEnum[]
  }

  /**
   * ComponentType findFirstOrThrow
   */
  export type ComponentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentType to fetch.
     */
    where?: ComponentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTypes to fetch.
     */
    orderBy?: ComponentTypeOrderByWithRelationInput | ComponentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentTypes.
     */
    cursor?: ComponentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentTypes.
     */
    distinct?: ComponentTypeScalarFieldEnum | ComponentTypeScalarFieldEnum[]
  }

  /**
   * ComponentType findMany
   */
  export type ComponentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTypes to fetch.
     */
    where?: ComponentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTypes to fetch.
     */
    orderBy?: ComponentTypeOrderByWithRelationInput | ComponentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentTypes.
     */
    cursor?: ComponentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTypes.
     */
    skip?: number
    distinct?: ComponentTypeScalarFieldEnum | ComponentTypeScalarFieldEnum[]
  }

  /**
   * ComponentType create
   */
  export type ComponentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentType.
     */
    data: XOR<ComponentTypeCreateInput, ComponentTypeUncheckedCreateInput>
  }

  /**
   * ComponentType createMany
   */
  export type ComponentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentTypes.
     */
    data: ComponentTypeCreateManyInput | ComponentTypeCreateManyInput[]
  }

  /**
   * ComponentType createManyAndReturn
   */
  export type ComponentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ComponentTypes.
     */
    data: ComponentTypeCreateManyInput | ComponentTypeCreateManyInput[]
  }

  /**
   * ComponentType update
   */
  export type ComponentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentType.
     */
    data: XOR<ComponentTypeUpdateInput, ComponentTypeUncheckedUpdateInput>
    /**
     * Choose, which ComponentType to update.
     */
    where: ComponentTypeWhereUniqueInput
  }

  /**
   * ComponentType updateMany
   */
  export type ComponentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentTypes.
     */
    data: XOR<ComponentTypeUpdateManyMutationInput, ComponentTypeUncheckedUpdateManyInput>
    /**
     * Filter which ComponentTypes to update
     */
    where?: ComponentTypeWhereInput
  }

  /**
   * ComponentType upsert
   */
  export type ComponentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentType to update in case it exists.
     */
    where: ComponentTypeWhereUniqueInput
    /**
     * In case the ComponentType found by the `where` argument doesn't exist, create a new ComponentType with this data.
     */
    create: XOR<ComponentTypeCreateInput, ComponentTypeUncheckedCreateInput>
    /**
     * In case the ComponentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentTypeUpdateInput, ComponentTypeUncheckedUpdateInput>
  }

  /**
   * ComponentType delete
   */
  export type ComponentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
    /**
     * Filter which ComponentType to delete.
     */
    where: ComponentTypeWhereUniqueInput
  }

  /**
   * ComponentType deleteMany
   */
  export type ComponentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentTypes to delete
     */
    where?: ComponentTypeWhereInput
  }

  /**
   * ComponentType.subtypes
   */
  export type ComponentType$subtypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSubtype
     */
    select?: ComponentSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSubtypeInclude<ExtArgs> | null
    where?: ComponentSubtypeWhereInput
    orderBy?: ComponentSubtypeOrderByWithRelationInput | ComponentSubtypeOrderByWithRelationInput[]
    cursor?: ComponentSubtypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentSubtypeScalarFieldEnum | ComponentSubtypeScalarFieldEnum[]
  }

  /**
   * ComponentType without action
   */
  export type ComponentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentType
     */
    select?: ComponentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTypeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ComponentsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    component_photo: 'component_photo',
    description: 'description',
    documentation_name: 'documentation_name',
    subtype_id: 'subtype_id'
  };

  export type ComponentsScalarFieldEnum = (typeof ComponentsScalarFieldEnum)[keyof typeof ComponentsScalarFieldEnum]


  export const FavoriteComponentsScalarFieldEnum: {
    user_id: 'user_id',
    component_id: 'component_id'
  };

  export type FavoriteComponentsScalarFieldEnum = (typeof FavoriteComponentsScalarFieldEnum)[keyof typeof FavoriteComponentsScalarFieldEnum]


  export const ComponentPropertiesScalarFieldEnum: {
    id: 'id',
    property_name: 'property_name',
    property_value: 'property_value',
    component_id: 'component_id'
  };

  export type ComponentPropertiesScalarFieldEnum = (typeof ComponentPropertiesScalarFieldEnum)[keyof typeof ComponentPropertiesScalarFieldEnum]


  export const ComponentSubtypeScalarFieldEnum: {
    id: 'id',
    subtype_name: 'subtype_name',
    type_id: 'type_id'
  };

  export type ComponentSubtypeScalarFieldEnum = (typeof ComponentSubtypeScalarFieldEnum)[keyof typeof ComponentSubtypeScalarFieldEnum]


  export const ComponentTypeScalarFieldEnum: {
    id: 'id',
    type_name: 'type_name',
    type_description: 'type_description',
    type_image: 'type_image'
  };

  export type ComponentTypeScalarFieldEnum = (typeof ComponentTypeScalarFieldEnum)[keyof typeof ComponentTypeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    favorite_component?: FavoriteComponentsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    favorite_component?: FavoriteComponentsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    favorite_component?: FavoriteComponentsListRelationFilter
  }, "id">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
  }

  export type ComponentsWhereInput = {
    AND?: ComponentsWhereInput | ComponentsWhereInput[]
    OR?: ComponentsWhereInput[]
    NOT?: ComponentsWhereInput | ComponentsWhereInput[]
    id?: IntFilter<"Components"> | number
    title?: StringFilter<"Components"> | string
    component_photo?: StringFilter<"Components"> | string
    description?: StringFilter<"Components"> | string
    documentation_name?: StringFilter<"Components"> | string
    subtype_id?: IntFilter<"Components"> | number
    favorite_component?: FavoriteComponentsListRelationFilter
    component_properties?: ComponentPropertiesListRelationFilter
    subtype?: XOR<ComponentSubtypeRelationFilter, ComponentSubtypeWhereInput>
  }

  export type ComponentsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    component_photo?: SortOrder
    description?: SortOrder
    documentation_name?: SortOrder
    subtype_id?: SortOrder
    favorite_component?: FavoriteComponentsOrderByRelationAggregateInput
    component_properties?: ComponentPropertiesOrderByRelationAggregateInput
    subtype?: ComponentSubtypeOrderByWithRelationInput
  }

  export type ComponentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ComponentsWhereInput | ComponentsWhereInput[]
    OR?: ComponentsWhereInput[]
    NOT?: ComponentsWhereInput | ComponentsWhereInput[]
    title?: StringFilter<"Components"> | string
    component_photo?: StringFilter<"Components"> | string
    description?: StringFilter<"Components"> | string
    documentation_name?: StringFilter<"Components"> | string
    subtype_id?: IntFilter<"Components"> | number
    favorite_component?: FavoriteComponentsListRelationFilter
    component_properties?: ComponentPropertiesListRelationFilter
    subtype?: XOR<ComponentSubtypeRelationFilter, ComponentSubtypeWhereInput>
  }, "id">

  export type ComponentsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    component_photo?: SortOrder
    description?: SortOrder
    documentation_name?: SortOrder
    subtype_id?: SortOrder
    _count?: ComponentsCountOrderByAggregateInput
    _avg?: ComponentsAvgOrderByAggregateInput
    _max?: ComponentsMaxOrderByAggregateInput
    _min?: ComponentsMinOrderByAggregateInput
    _sum?: ComponentsSumOrderByAggregateInput
  }

  export type ComponentsScalarWhereWithAggregatesInput = {
    AND?: ComponentsScalarWhereWithAggregatesInput | ComponentsScalarWhereWithAggregatesInput[]
    OR?: ComponentsScalarWhereWithAggregatesInput[]
    NOT?: ComponentsScalarWhereWithAggregatesInput | ComponentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Components"> | number
    title?: StringWithAggregatesFilter<"Components"> | string
    component_photo?: StringWithAggregatesFilter<"Components"> | string
    description?: StringWithAggregatesFilter<"Components"> | string
    documentation_name?: StringWithAggregatesFilter<"Components"> | string
    subtype_id?: IntWithAggregatesFilter<"Components"> | number
  }

  export type FavoriteComponentsWhereInput = {
    AND?: FavoriteComponentsWhereInput | FavoriteComponentsWhereInput[]
    OR?: FavoriteComponentsWhereInput[]
    NOT?: FavoriteComponentsWhereInput | FavoriteComponentsWhereInput[]
    user_id?: IntFilter<"FavoriteComponents"> | number
    component_id?: IntFilter<"FavoriteComponents"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    component?: XOR<ComponentsRelationFilter, ComponentsWhereInput>
  }

  export type FavoriteComponentsOrderByWithRelationInput = {
    user_id?: SortOrder
    component_id?: SortOrder
    user?: UsersOrderByWithRelationInput
    component?: ComponentsOrderByWithRelationInput
  }

  export type FavoriteComponentsWhereUniqueInput = Prisma.AtLeast<{
    user_id_component_id?: FavoriteComponentsUser_idComponent_idCompoundUniqueInput
    AND?: FavoriteComponentsWhereInput | FavoriteComponentsWhereInput[]
    OR?: FavoriteComponentsWhereInput[]
    NOT?: FavoriteComponentsWhereInput | FavoriteComponentsWhereInput[]
    user_id?: IntFilter<"FavoriteComponents"> | number
    component_id?: IntFilter<"FavoriteComponents"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    component?: XOR<ComponentsRelationFilter, ComponentsWhereInput>
  }, "user_id_component_id">

  export type FavoriteComponentsOrderByWithAggregationInput = {
    user_id?: SortOrder
    component_id?: SortOrder
    _count?: FavoriteComponentsCountOrderByAggregateInput
    _avg?: FavoriteComponentsAvgOrderByAggregateInput
    _max?: FavoriteComponentsMaxOrderByAggregateInput
    _min?: FavoriteComponentsMinOrderByAggregateInput
    _sum?: FavoriteComponentsSumOrderByAggregateInput
  }

  export type FavoriteComponentsScalarWhereWithAggregatesInput = {
    AND?: FavoriteComponentsScalarWhereWithAggregatesInput | FavoriteComponentsScalarWhereWithAggregatesInput[]
    OR?: FavoriteComponentsScalarWhereWithAggregatesInput[]
    NOT?: FavoriteComponentsScalarWhereWithAggregatesInput | FavoriteComponentsScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"FavoriteComponents"> | number
    component_id?: IntWithAggregatesFilter<"FavoriteComponents"> | number
  }

  export type ComponentPropertiesWhereInput = {
    AND?: ComponentPropertiesWhereInput | ComponentPropertiesWhereInput[]
    OR?: ComponentPropertiesWhereInput[]
    NOT?: ComponentPropertiesWhereInput | ComponentPropertiesWhereInput[]
    id?: IntFilter<"ComponentProperties"> | number
    property_name?: StringFilter<"ComponentProperties"> | string
    property_value?: StringFilter<"ComponentProperties"> | string
    component_id?: IntFilter<"ComponentProperties"> | number
    component?: XOR<ComponentsRelationFilter, ComponentsWhereInput>
  }

  export type ComponentPropertiesOrderByWithRelationInput = {
    id?: SortOrder
    property_name?: SortOrder
    property_value?: SortOrder
    component_id?: SortOrder
    component?: ComponentsOrderByWithRelationInput
  }

  export type ComponentPropertiesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ComponentPropertiesWhereInput | ComponentPropertiesWhereInput[]
    OR?: ComponentPropertiesWhereInput[]
    NOT?: ComponentPropertiesWhereInput | ComponentPropertiesWhereInput[]
    property_name?: StringFilter<"ComponentProperties"> | string
    property_value?: StringFilter<"ComponentProperties"> | string
    component_id?: IntFilter<"ComponentProperties"> | number
    component?: XOR<ComponentsRelationFilter, ComponentsWhereInput>
  }, "id">

  export type ComponentPropertiesOrderByWithAggregationInput = {
    id?: SortOrder
    property_name?: SortOrder
    property_value?: SortOrder
    component_id?: SortOrder
    _count?: ComponentPropertiesCountOrderByAggregateInput
    _avg?: ComponentPropertiesAvgOrderByAggregateInput
    _max?: ComponentPropertiesMaxOrderByAggregateInput
    _min?: ComponentPropertiesMinOrderByAggregateInput
    _sum?: ComponentPropertiesSumOrderByAggregateInput
  }

  export type ComponentPropertiesScalarWhereWithAggregatesInput = {
    AND?: ComponentPropertiesScalarWhereWithAggregatesInput | ComponentPropertiesScalarWhereWithAggregatesInput[]
    OR?: ComponentPropertiesScalarWhereWithAggregatesInput[]
    NOT?: ComponentPropertiesScalarWhereWithAggregatesInput | ComponentPropertiesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ComponentProperties"> | number
    property_name?: StringWithAggregatesFilter<"ComponentProperties"> | string
    property_value?: StringWithAggregatesFilter<"ComponentProperties"> | string
    component_id?: IntWithAggregatesFilter<"ComponentProperties"> | number
  }

  export type ComponentSubtypeWhereInput = {
    AND?: ComponentSubtypeWhereInput | ComponentSubtypeWhereInput[]
    OR?: ComponentSubtypeWhereInput[]
    NOT?: ComponentSubtypeWhereInput | ComponentSubtypeWhereInput[]
    id?: IntFilter<"ComponentSubtype"> | number
    subtype_name?: StringFilter<"ComponentSubtype"> | string
    type_id?: IntNullableFilter<"ComponentSubtype"> | number | null
    type?: XOR<ComponentTypeNullableRelationFilter, ComponentTypeWhereInput> | null
    components?: ComponentsListRelationFilter
  }

  export type ComponentSubtypeOrderByWithRelationInput = {
    id?: SortOrder
    subtype_name?: SortOrder
    type_id?: SortOrderInput | SortOrder
    type?: ComponentTypeOrderByWithRelationInput
    components?: ComponentsOrderByRelationAggregateInput
  }

  export type ComponentSubtypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ComponentSubtypeWhereInput | ComponentSubtypeWhereInput[]
    OR?: ComponentSubtypeWhereInput[]
    NOT?: ComponentSubtypeWhereInput | ComponentSubtypeWhereInput[]
    subtype_name?: StringFilter<"ComponentSubtype"> | string
    type_id?: IntNullableFilter<"ComponentSubtype"> | number | null
    type?: XOR<ComponentTypeNullableRelationFilter, ComponentTypeWhereInput> | null
    components?: ComponentsListRelationFilter
  }, "id">

  export type ComponentSubtypeOrderByWithAggregationInput = {
    id?: SortOrder
    subtype_name?: SortOrder
    type_id?: SortOrderInput | SortOrder
    _count?: ComponentSubtypeCountOrderByAggregateInput
    _avg?: ComponentSubtypeAvgOrderByAggregateInput
    _max?: ComponentSubtypeMaxOrderByAggregateInput
    _min?: ComponentSubtypeMinOrderByAggregateInput
    _sum?: ComponentSubtypeSumOrderByAggregateInput
  }

  export type ComponentSubtypeScalarWhereWithAggregatesInput = {
    AND?: ComponentSubtypeScalarWhereWithAggregatesInput | ComponentSubtypeScalarWhereWithAggregatesInput[]
    OR?: ComponentSubtypeScalarWhereWithAggregatesInput[]
    NOT?: ComponentSubtypeScalarWhereWithAggregatesInput | ComponentSubtypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ComponentSubtype"> | number
    subtype_name?: StringWithAggregatesFilter<"ComponentSubtype"> | string
    type_id?: IntNullableWithAggregatesFilter<"ComponentSubtype"> | number | null
  }

  export type ComponentTypeWhereInput = {
    AND?: ComponentTypeWhereInput | ComponentTypeWhereInput[]
    OR?: ComponentTypeWhereInput[]
    NOT?: ComponentTypeWhereInput | ComponentTypeWhereInput[]
    id?: IntFilter<"ComponentType"> | number
    type_name?: StringFilter<"ComponentType"> | string
    type_description?: StringFilter<"ComponentType"> | string
    type_image?: StringFilter<"ComponentType"> | string
    subtypes?: ComponentSubtypeListRelationFilter
  }

  export type ComponentTypeOrderByWithRelationInput = {
    id?: SortOrder
    type_name?: SortOrder
    type_description?: SortOrder
    type_image?: SortOrder
    subtypes?: ComponentSubtypeOrderByRelationAggregateInput
  }

  export type ComponentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ComponentTypeWhereInput | ComponentTypeWhereInput[]
    OR?: ComponentTypeWhereInput[]
    NOT?: ComponentTypeWhereInput | ComponentTypeWhereInput[]
    type_name?: StringFilter<"ComponentType"> | string
    type_description?: StringFilter<"ComponentType"> | string
    type_image?: StringFilter<"ComponentType"> | string
    subtypes?: ComponentSubtypeListRelationFilter
  }, "id">

  export type ComponentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    type_name?: SortOrder
    type_description?: SortOrder
    type_image?: SortOrder
    _count?: ComponentTypeCountOrderByAggregateInput
    _avg?: ComponentTypeAvgOrderByAggregateInput
    _max?: ComponentTypeMaxOrderByAggregateInput
    _min?: ComponentTypeMinOrderByAggregateInput
    _sum?: ComponentTypeSumOrderByAggregateInput
  }

  export type ComponentTypeScalarWhereWithAggregatesInput = {
    AND?: ComponentTypeScalarWhereWithAggregatesInput | ComponentTypeScalarWhereWithAggregatesInput[]
    OR?: ComponentTypeScalarWhereWithAggregatesInput[]
    NOT?: ComponentTypeScalarWhereWithAggregatesInput | ComponentTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ComponentType"> | number
    type_name?: StringWithAggregatesFilter<"ComponentType"> | string
    type_description?: StringWithAggregatesFilter<"ComponentType"> | string
    type_image?: StringWithAggregatesFilter<"ComponentType"> | string
  }

  export type UsersCreateInput = {
    email: string
    password: string
    favorite_component?: FavoriteComponentsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    favorite_component?: FavoriteComponentsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    favorite_component?: FavoriteComponentsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    favorite_component?: FavoriteComponentsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type UsersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentsCreateInput = {
    title: string
    component_photo: string
    description: string
    documentation_name: string
    favorite_component?: FavoriteComponentsCreateNestedManyWithoutComponentInput
    component_properties?: ComponentPropertiesCreateNestedManyWithoutComponentInput
    subtype: ComponentSubtypeCreateNestedOneWithoutComponentsInput
  }

  export type ComponentsUncheckedCreateInput = {
    id?: number
    title: string
    component_photo: string
    description: string
    documentation_name: string
    subtype_id: number
    favorite_component?: FavoriteComponentsUncheckedCreateNestedManyWithoutComponentInput
    component_properties?: ComponentPropertiesUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    favorite_component?: FavoriteComponentsUpdateManyWithoutComponentNestedInput
    component_properties?: ComponentPropertiesUpdateManyWithoutComponentNestedInput
    subtype?: ComponentSubtypeUpdateOneRequiredWithoutComponentsNestedInput
  }

  export type ComponentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    subtype_id?: IntFieldUpdateOperationsInput | number
    favorite_component?: FavoriteComponentsUncheckedUpdateManyWithoutComponentNestedInput
    component_properties?: ComponentPropertiesUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ComponentsCreateManyInput = {
    id?: number
    title: string
    component_photo: string
    description: string
    documentation_name: string
    subtype_id: number
  }

  export type ComponentsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    subtype_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteComponentsCreateInput = {
    user: UsersCreateNestedOneWithoutFavorite_componentInput
    component: ComponentsCreateNestedOneWithoutFavorite_componentInput
  }

  export type FavoriteComponentsUncheckedCreateInput = {
    user_id: number
    component_id: number
  }

  export type FavoriteComponentsUpdateInput = {
    user?: UsersUpdateOneRequiredWithoutFavorite_componentNestedInput
    component?: ComponentsUpdateOneRequiredWithoutFavorite_componentNestedInput
  }

  export type FavoriteComponentsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    component_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteComponentsCreateManyInput = {
    user_id: number
    component_id: number
  }

  export type FavoriteComponentsUpdateManyMutationInput = {

  }

  export type FavoriteComponentsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    component_id?: IntFieldUpdateOperationsInput | number
  }

  export type ComponentPropertiesCreateInput = {
    property_name: string
    property_value: string
    component: ComponentsCreateNestedOneWithoutComponent_propertiesInput
  }

  export type ComponentPropertiesUncheckedCreateInput = {
    id?: number
    property_name: string
    property_value: string
    component_id: number
  }

  export type ComponentPropertiesUpdateInput = {
    property_name?: StringFieldUpdateOperationsInput | string
    property_value?: StringFieldUpdateOperationsInput | string
    component?: ComponentsUpdateOneRequiredWithoutComponent_propertiesNestedInput
  }

  export type ComponentPropertiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    property_name?: StringFieldUpdateOperationsInput | string
    property_value?: StringFieldUpdateOperationsInput | string
    component_id?: IntFieldUpdateOperationsInput | number
  }

  export type ComponentPropertiesCreateManyInput = {
    id?: number
    property_name: string
    property_value: string
    component_id: number
  }

  export type ComponentPropertiesUpdateManyMutationInput = {
    property_name?: StringFieldUpdateOperationsInput | string
    property_value?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentPropertiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    property_name?: StringFieldUpdateOperationsInput | string
    property_value?: StringFieldUpdateOperationsInput | string
    component_id?: IntFieldUpdateOperationsInput | number
  }

  export type ComponentSubtypeCreateInput = {
    subtype_name: string
    type?: ComponentTypeCreateNestedOneWithoutSubtypesInput
    components?: ComponentsCreateNestedManyWithoutSubtypeInput
  }

  export type ComponentSubtypeUncheckedCreateInput = {
    id?: number
    subtype_name: string
    type_id?: number | null
    components?: ComponentsUncheckedCreateNestedManyWithoutSubtypeInput
  }

  export type ComponentSubtypeUpdateInput = {
    subtype_name?: StringFieldUpdateOperationsInput | string
    type?: ComponentTypeUpdateOneWithoutSubtypesNestedInput
    components?: ComponentsUpdateManyWithoutSubtypeNestedInput
  }

  export type ComponentSubtypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtype_name?: StringFieldUpdateOperationsInput | string
    type_id?: NullableIntFieldUpdateOperationsInput | number | null
    components?: ComponentsUncheckedUpdateManyWithoutSubtypeNestedInput
  }

  export type ComponentSubtypeCreateManyInput = {
    id?: number
    subtype_name: string
    type_id?: number | null
  }

  export type ComponentSubtypeUpdateManyMutationInput = {
    subtype_name?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentSubtypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtype_name?: StringFieldUpdateOperationsInput | string
    type_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ComponentTypeCreateInput = {
    type_name: string
    type_description: string
    type_image: string
    subtypes?: ComponentSubtypeCreateNestedManyWithoutTypeInput
  }

  export type ComponentTypeUncheckedCreateInput = {
    id?: number
    type_name: string
    type_description: string
    type_image: string
    subtypes?: ComponentSubtypeUncheckedCreateNestedManyWithoutTypeInput
  }

  export type ComponentTypeUpdateInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    type_description?: StringFieldUpdateOperationsInput | string
    type_image?: StringFieldUpdateOperationsInput | string
    subtypes?: ComponentSubtypeUpdateManyWithoutTypeNestedInput
  }

  export type ComponentTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    type_description?: StringFieldUpdateOperationsInput | string
    type_image?: StringFieldUpdateOperationsInput | string
    subtypes?: ComponentSubtypeUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type ComponentTypeCreateManyInput = {
    id?: number
    type_name: string
    type_description: string
    type_image: string
  }

  export type ComponentTypeUpdateManyMutationInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    type_description?: StringFieldUpdateOperationsInput | string
    type_image?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    type_description?: StringFieldUpdateOperationsInput | string
    type_image?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FavoriteComponentsListRelationFilter = {
    every?: FavoriteComponentsWhereInput
    some?: FavoriteComponentsWhereInput
    none?: FavoriteComponentsWhereInput
  }

  export type FavoriteComponentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ComponentPropertiesListRelationFilter = {
    every?: ComponentPropertiesWhereInput
    some?: ComponentPropertiesWhereInput
    none?: ComponentPropertiesWhereInput
  }

  export type ComponentSubtypeRelationFilter = {
    is?: ComponentSubtypeWhereInput
    isNot?: ComponentSubtypeWhereInput
  }

  export type ComponentPropertiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    component_photo?: SortOrder
    description?: SortOrder
    documentation_name?: SortOrder
    subtype_id?: SortOrder
  }

  export type ComponentsAvgOrderByAggregateInput = {
    id?: SortOrder
    subtype_id?: SortOrder
  }

  export type ComponentsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    component_photo?: SortOrder
    description?: SortOrder
    documentation_name?: SortOrder
    subtype_id?: SortOrder
  }

  export type ComponentsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    component_photo?: SortOrder
    description?: SortOrder
    documentation_name?: SortOrder
    subtype_id?: SortOrder
  }

  export type ComponentsSumOrderByAggregateInput = {
    id?: SortOrder
    subtype_id?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type ComponentsRelationFilter = {
    is?: ComponentsWhereInput
    isNot?: ComponentsWhereInput
  }

  export type FavoriteComponentsUser_idComponent_idCompoundUniqueInput = {
    user_id: number
    component_id: number
  }

  export type FavoriteComponentsCountOrderByAggregateInput = {
    user_id?: SortOrder
    component_id?: SortOrder
  }

  export type FavoriteComponentsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    component_id?: SortOrder
  }

  export type FavoriteComponentsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    component_id?: SortOrder
  }

  export type FavoriteComponentsMinOrderByAggregateInput = {
    user_id?: SortOrder
    component_id?: SortOrder
  }

  export type FavoriteComponentsSumOrderByAggregateInput = {
    user_id?: SortOrder
    component_id?: SortOrder
  }

  export type ComponentPropertiesCountOrderByAggregateInput = {
    id?: SortOrder
    property_name?: SortOrder
    property_value?: SortOrder
    component_id?: SortOrder
  }

  export type ComponentPropertiesAvgOrderByAggregateInput = {
    id?: SortOrder
    component_id?: SortOrder
  }

  export type ComponentPropertiesMaxOrderByAggregateInput = {
    id?: SortOrder
    property_name?: SortOrder
    property_value?: SortOrder
    component_id?: SortOrder
  }

  export type ComponentPropertiesMinOrderByAggregateInput = {
    id?: SortOrder
    property_name?: SortOrder
    property_value?: SortOrder
    component_id?: SortOrder
  }

  export type ComponentPropertiesSumOrderByAggregateInput = {
    id?: SortOrder
    component_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ComponentTypeNullableRelationFilter = {
    is?: ComponentTypeWhereInput | null
    isNot?: ComponentTypeWhereInput | null
  }

  export type ComponentsListRelationFilter = {
    every?: ComponentsWhereInput
    some?: ComponentsWhereInput
    none?: ComponentsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ComponentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentSubtypeCountOrderByAggregateInput = {
    id?: SortOrder
    subtype_name?: SortOrder
    type_id?: SortOrder
  }

  export type ComponentSubtypeAvgOrderByAggregateInput = {
    id?: SortOrder
    type_id?: SortOrder
  }

  export type ComponentSubtypeMaxOrderByAggregateInput = {
    id?: SortOrder
    subtype_name?: SortOrder
    type_id?: SortOrder
  }

  export type ComponentSubtypeMinOrderByAggregateInput = {
    id?: SortOrder
    subtype_name?: SortOrder
    type_id?: SortOrder
  }

  export type ComponentSubtypeSumOrderByAggregateInput = {
    id?: SortOrder
    type_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ComponentSubtypeListRelationFilter = {
    every?: ComponentSubtypeWhereInput
    some?: ComponentSubtypeWhereInput
    none?: ComponentSubtypeWhereInput
  }

  export type ComponentSubtypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    type_name?: SortOrder
    type_description?: SortOrder
    type_image?: SortOrder
  }

  export type ComponentTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ComponentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type_name?: SortOrder
    type_description?: SortOrder
    type_image?: SortOrder
  }

  export type ComponentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    type_name?: SortOrder
    type_description?: SortOrder
    type_image?: SortOrder
  }

  export type ComponentTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FavoriteComponentsCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteComponentsCreateWithoutUserInput, FavoriteComponentsUncheckedCreateWithoutUserInput> | FavoriteComponentsCreateWithoutUserInput[] | FavoriteComponentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutUserInput | FavoriteComponentsCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteComponentsCreateManyUserInputEnvelope
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
  }

  export type FavoriteComponentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteComponentsCreateWithoutUserInput, FavoriteComponentsUncheckedCreateWithoutUserInput> | FavoriteComponentsCreateWithoutUserInput[] | FavoriteComponentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutUserInput | FavoriteComponentsCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteComponentsCreateManyUserInputEnvelope
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FavoriteComponentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteComponentsCreateWithoutUserInput, FavoriteComponentsUncheckedCreateWithoutUserInput> | FavoriteComponentsCreateWithoutUserInput[] | FavoriteComponentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutUserInput | FavoriteComponentsCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteComponentsUpsertWithWhereUniqueWithoutUserInput | FavoriteComponentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteComponentsCreateManyUserInputEnvelope
    set?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    disconnect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    delete?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    update?: FavoriteComponentsUpdateWithWhereUniqueWithoutUserInput | FavoriteComponentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteComponentsUpdateManyWithWhereWithoutUserInput | FavoriteComponentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteComponentsScalarWhereInput | FavoriteComponentsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FavoriteComponentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteComponentsCreateWithoutUserInput, FavoriteComponentsUncheckedCreateWithoutUserInput> | FavoriteComponentsCreateWithoutUserInput[] | FavoriteComponentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutUserInput | FavoriteComponentsCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteComponentsUpsertWithWhereUniqueWithoutUserInput | FavoriteComponentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteComponentsCreateManyUserInputEnvelope
    set?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    disconnect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    delete?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    update?: FavoriteComponentsUpdateWithWhereUniqueWithoutUserInput | FavoriteComponentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteComponentsUpdateManyWithWhereWithoutUserInput | FavoriteComponentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteComponentsScalarWhereInput | FavoriteComponentsScalarWhereInput[]
  }

  export type FavoriteComponentsCreateNestedManyWithoutComponentInput = {
    create?: XOR<FavoriteComponentsCreateWithoutComponentInput, FavoriteComponentsUncheckedCreateWithoutComponentInput> | FavoriteComponentsCreateWithoutComponentInput[] | FavoriteComponentsUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutComponentInput | FavoriteComponentsCreateOrConnectWithoutComponentInput[]
    createMany?: FavoriteComponentsCreateManyComponentInputEnvelope
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
  }

  export type ComponentPropertiesCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentPropertiesCreateWithoutComponentInput, ComponentPropertiesUncheckedCreateWithoutComponentInput> | ComponentPropertiesCreateWithoutComponentInput[] | ComponentPropertiesUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentPropertiesCreateOrConnectWithoutComponentInput | ComponentPropertiesCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentPropertiesCreateManyComponentInputEnvelope
    connect?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
  }

  export type ComponentSubtypeCreateNestedOneWithoutComponentsInput = {
    create?: XOR<ComponentSubtypeCreateWithoutComponentsInput, ComponentSubtypeUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: ComponentSubtypeCreateOrConnectWithoutComponentsInput
    connect?: ComponentSubtypeWhereUniqueInput
  }

  export type FavoriteComponentsUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<FavoriteComponentsCreateWithoutComponentInput, FavoriteComponentsUncheckedCreateWithoutComponentInput> | FavoriteComponentsCreateWithoutComponentInput[] | FavoriteComponentsUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutComponentInput | FavoriteComponentsCreateOrConnectWithoutComponentInput[]
    createMany?: FavoriteComponentsCreateManyComponentInputEnvelope
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
  }

  export type ComponentPropertiesUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentPropertiesCreateWithoutComponentInput, ComponentPropertiesUncheckedCreateWithoutComponentInput> | ComponentPropertiesCreateWithoutComponentInput[] | ComponentPropertiesUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentPropertiesCreateOrConnectWithoutComponentInput | ComponentPropertiesCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentPropertiesCreateManyComponentInputEnvelope
    connect?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
  }

  export type FavoriteComponentsUpdateManyWithoutComponentNestedInput = {
    create?: XOR<FavoriteComponentsCreateWithoutComponentInput, FavoriteComponentsUncheckedCreateWithoutComponentInput> | FavoriteComponentsCreateWithoutComponentInput[] | FavoriteComponentsUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutComponentInput | FavoriteComponentsCreateOrConnectWithoutComponentInput[]
    upsert?: FavoriteComponentsUpsertWithWhereUniqueWithoutComponentInput | FavoriteComponentsUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: FavoriteComponentsCreateManyComponentInputEnvelope
    set?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    disconnect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    delete?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    update?: FavoriteComponentsUpdateWithWhereUniqueWithoutComponentInput | FavoriteComponentsUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: FavoriteComponentsUpdateManyWithWhereWithoutComponentInput | FavoriteComponentsUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: FavoriteComponentsScalarWhereInput | FavoriteComponentsScalarWhereInput[]
  }

  export type ComponentPropertiesUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentPropertiesCreateWithoutComponentInput, ComponentPropertiesUncheckedCreateWithoutComponentInput> | ComponentPropertiesCreateWithoutComponentInput[] | ComponentPropertiesUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentPropertiesCreateOrConnectWithoutComponentInput | ComponentPropertiesCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentPropertiesUpsertWithWhereUniqueWithoutComponentInput | ComponentPropertiesUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentPropertiesCreateManyComponentInputEnvelope
    set?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    disconnect?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    delete?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    connect?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    update?: ComponentPropertiesUpdateWithWhereUniqueWithoutComponentInput | ComponentPropertiesUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentPropertiesUpdateManyWithWhereWithoutComponentInput | ComponentPropertiesUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentPropertiesScalarWhereInput | ComponentPropertiesScalarWhereInput[]
  }

  export type ComponentSubtypeUpdateOneRequiredWithoutComponentsNestedInput = {
    create?: XOR<ComponentSubtypeCreateWithoutComponentsInput, ComponentSubtypeUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: ComponentSubtypeCreateOrConnectWithoutComponentsInput
    upsert?: ComponentSubtypeUpsertWithoutComponentsInput
    connect?: ComponentSubtypeWhereUniqueInput
    update?: XOR<XOR<ComponentSubtypeUpdateToOneWithWhereWithoutComponentsInput, ComponentSubtypeUpdateWithoutComponentsInput>, ComponentSubtypeUncheckedUpdateWithoutComponentsInput>
  }

  export type FavoriteComponentsUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<FavoriteComponentsCreateWithoutComponentInput, FavoriteComponentsUncheckedCreateWithoutComponentInput> | FavoriteComponentsCreateWithoutComponentInput[] | FavoriteComponentsUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: FavoriteComponentsCreateOrConnectWithoutComponentInput | FavoriteComponentsCreateOrConnectWithoutComponentInput[]
    upsert?: FavoriteComponentsUpsertWithWhereUniqueWithoutComponentInput | FavoriteComponentsUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: FavoriteComponentsCreateManyComponentInputEnvelope
    set?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    disconnect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    delete?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    connect?: FavoriteComponentsWhereUniqueInput | FavoriteComponentsWhereUniqueInput[]
    update?: FavoriteComponentsUpdateWithWhereUniqueWithoutComponentInput | FavoriteComponentsUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: FavoriteComponentsUpdateManyWithWhereWithoutComponentInput | FavoriteComponentsUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: FavoriteComponentsScalarWhereInput | FavoriteComponentsScalarWhereInput[]
  }

  export type ComponentPropertiesUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentPropertiesCreateWithoutComponentInput, ComponentPropertiesUncheckedCreateWithoutComponentInput> | ComponentPropertiesCreateWithoutComponentInput[] | ComponentPropertiesUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentPropertiesCreateOrConnectWithoutComponentInput | ComponentPropertiesCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentPropertiesUpsertWithWhereUniqueWithoutComponentInput | ComponentPropertiesUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentPropertiesCreateManyComponentInputEnvelope
    set?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    disconnect?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    delete?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    connect?: ComponentPropertiesWhereUniqueInput | ComponentPropertiesWhereUniqueInput[]
    update?: ComponentPropertiesUpdateWithWhereUniqueWithoutComponentInput | ComponentPropertiesUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentPropertiesUpdateManyWithWhereWithoutComponentInput | ComponentPropertiesUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentPropertiesScalarWhereInput | ComponentPropertiesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutFavorite_componentInput = {
    create?: XOR<UsersCreateWithoutFavorite_componentInput, UsersUncheckedCreateWithoutFavorite_componentInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFavorite_componentInput
    connect?: UsersWhereUniqueInput
  }

  export type ComponentsCreateNestedOneWithoutFavorite_componentInput = {
    create?: XOR<ComponentsCreateWithoutFavorite_componentInput, ComponentsUncheckedCreateWithoutFavorite_componentInput>
    connectOrCreate?: ComponentsCreateOrConnectWithoutFavorite_componentInput
    connect?: ComponentsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutFavorite_componentNestedInput = {
    create?: XOR<UsersCreateWithoutFavorite_componentInput, UsersUncheckedCreateWithoutFavorite_componentInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFavorite_componentInput
    upsert?: UsersUpsertWithoutFavorite_componentInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutFavorite_componentInput, UsersUpdateWithoutFavorite_componentInput>, UsersUncheckedUpdateWithoutFavorite_componentInput>
  }

  export type ComponentsUpdateOneRequiredWithoutFavorite_componentNestedInput = {
    create?: XOR<ComponentsCreateWithoutFavorite_componentInput, ComponentsUncheckedCreateWithoutFavorite_componentInput>
    connectOrCreate?: ComponentsCreateOrConnectWithoutFavorite_componentInput
    upsert?: ComponentsUpsertWithoutFavorite_componentInput
    connect?: ComponentsWhereUniqueInput
    update?: XOR<XOR<ComponentsUpdateToOneWithWhereWithoutFavorite_componentInput, ComponentsUpdateWithoutFavorite_componentInput>, ComponentsUncheckedUpdateWithoutFavorite_componentInput>
  }

  export type ComponentsCreateNestedOneWithoutComponent_propertiesInput = {
    create?: XOR<ComponentsCreateWithoutComponent_propertiesInput, ComponentsUncheckedCreateWithoutComponent_propertiesInput>
    connectOrCreate?: ComponentsCreateOrConnectWithoutComponent_propertiesInput
    connect?: ComponentsWhereUniqueInput
  }

  export type ComponentsUpdateOneRequiredWithoutComponent_propertiesNestedInput = {
    create?: XOR<ComponentsCreateWithoutComponent_propertiesInput, ComponentsUncheckedCreateWithoutComponent_propertiesInput>
    connectOrCreate?: ComponentsCreateOrConnectWithoutComponent_propertiesInput
    upsert?: ComponentsUpsertWithoutComponent_propertiesInput
    connect?: ComponentsWhereUniqueInput
    update?: XOR<XOR<ComponentsUpdateToOneWithWhereWithoutComponent_propertiesInput, ComponentsUpdateWithoutComponent_propertiesInput>, ComponentsUncheckedUpdateWithoutComponent_propertiesInput>
  }

  export type ComponentTypeCreateNestedOneWithoutSubtypesInput = {
    create?: XOR<ComponentTypeCreateWithoutSubtypesInput, ComponentTypeUncheckedCreateWithoutSubtypesInput>
    connectOrCreate?: ComponentTypeCreateOrConnectWithoutSubtypesInput
    connect?: ComponentTypeWhereUniqueInput
  }

  export type ComponentsCreateNestedManyWithoutSubtypeInput = {
    create?: XOR<ComponentsCreateWithoutSubtypeInput, ComponentsUncheckedCreateWithoutSubtypeInput> | ComponentsCreateWithoutSubtypeInput[] | ComponentsUncheckedCreateWithoutSubtypeInput[]
    connectOrCreate?: ComponentsCreateOrConnectWithoutSubtypeInput | ComponentsCreateOrConnectWithoutSubtypeInput[]
    createMany?: ComponentsCreateManySubtypeInputEnvelope
    connect?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
  }

  export type ComponentsUncheckedCreateNestedManyWithoutSubtypeInput = {
    create?: XOR<ComponentsCreateWithoutSubtypeInput, ComponentsUncheckedCreateWithoutSubtypeInput> | ComponentsCreateWithoutSubtypeInput[] | ComponentsUncheckedCreateWithoutSubtypeInput[]
    connectOrCreate?: ComponentsCreateOrConnectWithoutSubtypeInput | ComponentsCreateOrConnectWithoutSubtypeInput[]
    createMany?: ComponentsCreateManySubtypeInputEnvelope
    connect?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
  }

  export type ComponentTypeUpdateOneWithoutSubtypesNestedInput = {
    create?: XOR<ComponentTypeCreateWithoutSubtypesInput, ComponentTypeUncheckedCreateWithoutSubtypesInput>
    connectOrCreate?: ComponentTypeCreateOrConnectWithoutSubtypesInput
    upsert?: ComponentTypeUpsertWithoutSubtypesInput
    disconnect?: ComponentTypeWhereInput | boolean
    delete?: ComponentTypeWhereInput | boolean
    connect?: ComponentTypeWhereUniqueInput
    update?: XOR<XOR<ComponentTypeUpdateToOneWithWhereWithoutSubtypesInput, ComponentTypeUpdateWithoutSubtypesInput>, ComponentTypeUncheckedUpdateWithoutSubtypesInput>
  }

  export type ComponentsUpdateManyWithoutSubtypeNestedInput = {
    create?: XOR<ComponentsCreateWithoutSubtypeInput, ComponentsUncheckedCreateWithoutSubtypeInput> | ComponentsCreateWithoutSubtypeInput[] | ComponentsUncheckedCreateWithoutSubtypeInput[]
    connectOrCreate?: ComponentsCreateOrConnectWithoutSubtypeInput | ComponentsCreateOrConnectWithoutSubtypeInput[]
    upsert?: ComponentsUpsertWithWhereUniqueWithoutSubtypeInput | ComponentsUpsertWithWhereUniqueWithoutSubtypeInput[]
    createMany?: ComponentsCreateManySubtypeInputEnvelope
    set?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    disconnect?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    delete?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    connect?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    update?: ComponentsUpdateWithWhereUniqueWithoutSubtypeInput | ComponentsUpdateWithWhereUniqueWithoutSubtypeInput[]
    updateMany?: ComponentsUpdateManyWithWhereWithoutSubtypeInput | ComponentsUpdateManyWithWhereWithoutSubtypeInput[]
    deleteMany?: ComponentsScalarWhereInput | ComponentsScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ComponentsUncheckedUpdateManyWithoutSubtypeNestedInput = {
    create?: XOR<ComponentsCreateWithoutSubtypeInput, ComponentsUncheckedCreateWithoutSubtypeInput> | ComponentsCreateWithoutSubtypeInput[] | ComponentsUncheckedCreateWithoutSubtypeInput[]
    connectOrCreate?: ComponentsCreateOrConnectWithoutSubtypeInput | ComponentsCreateOrConnectWithoutSubtypeInput[]
    upsert?: ComponentsUpsertWithWhereUniqueWithoutSubtypeInput | ComponentsUpsertWithWhereUniqueWithoutSubtypeInput[]
    createMany?: ComponentsCreateManySubtypeInputEnvelope
    set?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    disconnect?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    delete?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    connect?: ComponentsWhereUniqueInput | ComponentsWhereUniqueInput[]
    update?: ComponentsUpdateWithWhereUniqueWithoutSubtypeInput | ComponentsUpdateWithWhereUniqueWithoutSubtypeInput[]
    updateMany?: ComponentsUpdateManyWithWhereWithoutSubtypeInput | ComponentsUpdateManyWithWhereWithoutSubtypeInput[]
    deleteMany?: ComponentsScalarWhereInput | ComponentsScalarWhereInput[]
  }

  export type ComponentSubtypeCreateNestedManyWithoutTypeInput = {
    create?: XOR<ComponentSubtypeCreateWithoutTypeInput, ComponentSubtypeUncheckedCreateWithoutTypeInput> | ComponentSubtypeCreateWithoutTypeInput[] | ComponentSubtypeUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ComponentSubtypeCreateOrConnectWithoutTypeInput | ComponentSubtypeCreateOrConnectWithoutTypeInput[]
    createMany?: ComponentSubtypeCreateManyTypeInputEnvelope
    connect?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
  }

  export type ComponentSubtypeUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<ComponentSubtypeCreateWithoutTypeInput, ComponentSubtypeUncheckedCreateWithoutTypeInput> | ComponentSubtypeCreateWithoutTypeInput[] | ComponentSubtypeUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ComponentSubtypeCreateOrConnectWithoutTypeInput | ComponentSubtypeCreateOrConnectWithoutTypeInput[]
    createMany?: ComponentSubtypeCreateManyTypeInputEnvelope
    connect?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
  }

  export type ComponentSubtypeUpdateManyWithoutTypeNestedInput = {
    create?: XOR<ComponentSubtypeCreateWithoutTypeInput, ComponentSubtypeUncheckedCreateWithoutTypeInput> | ComponentSubtypeCreateWithoutTypeInput[] | ComponentSubtypeUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ComponentSubtypeCreateOrConnectWithoutTypeInput | ComponentSubtypeCreateOrConnectWithoutTypeInput[]
    upsert?: ComponentSubtypeUpsertWithWhereUniqueWithoutTypeInput | ComponentSubtypeUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: ComponentSubtypeCreateManyTypeInputEnvelope
    set?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    disconnect?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    delete?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    connect?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    update?: ComponentSubtypeUpdateWithWhereUniqueWithoutTypeInput | ComponentSubtypeUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: ComponentSubtypeUpdateManyWithWhereWithoutTypeInput | ComponentSubtypeUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: ComponentSubtypeScalarWhereInput | ComponentSubtypeScalarWhereInput[]
  }

  export type ComponentSubtypeUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<ComponentSubtypeCreateWithoutTypeInput, ComponentSubtypeUncheckedCreateWithoutTypeInput> | ComponentSubtypeCreateWithoutTypeInput[] | ComponentSubtypeUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ComponentSubtypeCreateOrConnectWithoutTypeInput | ComponentSubtypeCreateOrConnectWithoutTypeInput[]
    upsert?: ComponentSubtypeUpsertWithWhereUniqueWithoutTypeInput | ComponentSubtypeUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: ComponentSubtypeCreateManyTypeInputEnvelope
    set?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    disconnect?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    delete?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    connect?: ComponentSubtypeWhereUniqueInput | ComponentSubtypeWhereUniqueInput[]
    update?: ComponentSubtypeUpdateWithWhereUniqueWithoutTypeInput | ComponentSubtypeUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: ComponentSubtypeUpdateManyWithWhereWithoutTypeInput | ComponentSubtypeUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: ComponentSubtypeScalarWhereInput | ComponentSubtypeScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type FavoriteComponentsCreateWithoutUserInput = {
    component: ComponentsCreateNestedOneWithoutFavorite_componentInput
  }

  export type FavoriteComponentsUncheckedCreateWithoutUserInput = {
    component_id: number
  }

  export type FavoriteComponentsCreateOrConnectWithoutUserInput = {
    where: FavoriteComponentsWhereUniqueInput
    create: XOR<FavoriteComponentsCreateWithoutUserInput, FavoriteComponentsUncheckedCreateWithoutUserInput>
  }

  export type FavoriteComponentsCreateManyUserInputEnvelope = {
    data: FavoriteComponentsCreateManyUserInput | FavoriteComponentsCreateManyUserInput[]
  }

  export type FavoriteComponentsUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteComponentsWhereUniqueInput
    update: XOR<FavoriteComponentsUpdateWithoutUserInput, FavoriteComponentsUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteComponentsCreateWithoutUserInput, FavoriteComponentsUncheckedCreateWithoutUserInput>
  }

  export type FavoriteComponentsUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteComponentsWhereUniqueInput
    data: XOR<FavoriteComponentsUpdateWithoutUserInput, FavoriteComponentsUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteComponentsUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteComponentsScalarWhereInput
    data: XOR<FavoriteComponentsUpdateManyMutationInput, FavoriteComponentsUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteComponentsScalarWhereInput = {
    AND?: FavoriteComponentsScalarWhereInput | FavoriteComponentsScalarWhereInput[]
    OR?: FavoriteComponentsScalarWhereInput[]
    NOT?: FavoriteComponentsScalarWhereInput | FavoriteComponentsScalarWhereInput[]
    user_id?: IntFilter<"FavoriteComponents"> | number
    component_id?: IntFilter<"FavoriteComponents"> | number
  }

  export type FavoriteComponentsCreateWithoutComponentInput = {
    user: UsersCreateNestedOneWithoutFavorite_componentInput
  }

  export type FavoriteComponentsUncheckedCreateWithoutComponentInput = {
    user_id: number
  }

  export type FavoriteComponentsCreateOrConnectWithoutComponentInput = {
    where: FavoriteComponentsWhereUniqueInput
    create: XOR<FavoriteComponentsCreateWithoutComponentInput, FavoriteComponentsUncheckedCreateWithoutComponentInput>
  }

  export type FavoriteComponentsCreateManyComponentInputEnvelope = {
    data: FavoriteComponentsCreateManyComponentInput | FavoriteComponentsCreateManyComponentInput[]
  }

  export type ComponentPropertiesCreateWithoutComponentInput = {
    property_name: string
    property_value: string
  }

  export type ComponentPropertiesUncheckedCreateWithoutComponentInput = {
    id?: number
    property_name: string
    property_value: string
  }

  export type ComponentPropertiesCreateOrConnectWithoutComponentInput = {
    where: ComponentPropertiesWhereUniqueInput
    create: XOR<ComponentPropertiesCreateWithoutComponentInput, ComponentPropertiesUncheckedCreateWithoutComponentInput>
  }

  export type ComponentPropertiesCreateManyComponentInputEnvelope = {
    data: ComponentPropertiesCreateManyComponentInput | ComponentPropertiesCreateManyComponentInput[]
  }

  export type ComponentSubtypeCreateWithoutComponentsInput = {
    subtype_name: string
    type?: ComponentTypeCreateNestedOneWithoutSubtypesInput
  }

  export type ComponentSubtypeUncheckedCreateWithoutComponentsInput = {
    id?: number
    subtype_name: string
    type_id?: number | null
  }

  export type ComponentSubtypeCreateOrConnectWithoutComponentsInput = {
    where: ComponentSubtypeWhereUniqueInput
    create: XOR<ComponentSubtypeCreateWithoutComponentsInput, ComponentSubtypeUncheckedCreateWithoutComponentsInput>
  }

  export type FavoriteComponentsUpsertWithWhereUniqueWithoutComponentInput = {
    where: FavoriteComponentsWhereUniqueInput
    update: XOR<FavoriteComponentsUpdateWithoutComponentInput, FavoriteComponentsUncheckedUpdateWithoutComponentInput>
    create: XOR<FavoriteComponentsCreateWithoutComponentInput, FavoriteComponentsUncheckedCreateWithoutComponentInput>
  }

  export type FavoriteComponentsUpdateWithWhereUniqueWithoutComponentInput = {
    where: FavoriteComponentsWhereUniqueInput
    data: XOR<FavoriteComponentsUpdateWithoutComponentInput, FavoriteComponentsUncheckedUpdateWithoutComponentInput>
  }

  export type FavoriteComponentsUpdateManyWithWhereWithoutComponentInput = {
    where: FavoriteComponentsScalarWhereInput
    data: XOR<FavoriteComponentsUpdateManyMutationInput, FavoriteComponentsUncheckedUpdateManyWithoutComponentInput>
  }

  export type ComponentPropertiesUpsertWithWhereUniqueWithoutComponentInput = {
    where: ComponentPropertiesWhereUniqueInput
    update: XOR<ComponentPropertiesUpdateWithoutComponentInput, ComponentPropertiesUncheckedUpdateWithoutComponentInput>
    create: XOR<ComponentPropertiesCreateWithoutComponentInput, ComponentPropertiesUncheckedCreateWithoutComponentInput>
  }

  export type ComponentPropertiesUpdateWithWhereUniqueWithoutComponentInput = {
    where: ComponentPropertiesWhereUniqueInput
    data: XOR<ComponentPropertiesUpdateWithoutComponentInput, ComponentPropertiesUncheckedUpdateWithoutComponentInput>
  }

  export type ComponentPropertiesUpdateManyWithWhereWithoutComponentInput = {
    where: ComponentPropertiesScalarWhereInput
    data: XOR<ComponentPropertiesUpdateManyMutationInput, ComponentPropertiesUncheckedUpdateManyWithoutComponentInput>
  }

  export type ComponentPropertiesScalarWhereInput = {
    AND?: ComponentPropertiesScalarWhereInput | ComponentPropertiesScalarWhereInput[]
    OR?: ComponentPropertiesScalarWhereInput[]
    NOT?: ComponentPropertiesScalarWhereInput | ComponentPropertiesScalarWhereInput[]
    id?: IntFilter<"ComponentProperties"> | number
    property_name?: StringFilter<"ComponentProperties"> | string
    property_value?: StringFilter<"ComponentProperties"> | string
    component_id?: IntFilter<"ComponentProperties"> | number
  }

  export type ComponentSubtypeUpsertWithoutComponentsInput = {
    update: XOR<ComponentSubtypeUpdateWithoutComponentsInput, ComponentSubtypeUncheckedUpdateWithoutComponentsInput>
    create: XOR<ComponentSubtypeCreateWithoutComponentsInput, ComponentSubtypeUncheckedCreateWithoutComponentsInput>
    where?: ComponentSubtypeWhereInput
  }

  export type ComponentSubtypeUpdateToOneWithWhereWithoutComponentsInput = {
    where?: ComponentSubtypeWhereInput
    data: XOR<ComponentSubtypeUpdateWithoutComponentsInput, ComponentSubtypeUncheckedUpdateWithoutComponentsInput>
  }

  export type ComponentSubtypeUpdateWithoutComponentsInput = {
    subtype_name?: StringFieldUpdateOperationsInput | string
    type?: ComponentTypeUpdateOneWithoutSubtypesNestedInput
  }

  export type ComponentSubtypeUncheckedUpdateWithoutComponentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtype_name?: StringFieldUpdateOperationsInput | string
    type_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersCreateWithoutFavorite_componentInput = {
    email: string
    password: string
  }

  export type UsersUncheckedCreateWithoutFavorite_componentInput = {
    id?: number
    email: string
    password: string
  }

  export type UsersCreateOrConnectWithoutFavorite_componentInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFavorite_componentInput, UsersUncheckedCreateWithoutFavorite_componentInput>
  }

  export type ComponentsCreateWithoutFavorite_componentInput = {
    title: string
    component_photo: string
    description: string
    documentation_name: string
    component_properties?: ComponentPropertiesCreateNestedManyWithoutComponentInput
    subtype: ComponentSubtypeCreateNestedOneWithoutComponentsInput
  }

  export type ComponentsUncheckedCreateWithoutFavorite_componentInput = {
    id?: number
    title: string
    component_photo: string
    description: string
    documentation_name: string
    subtype_id: number
    component_properties?: ComponentPropertiesUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentsCreateOrConnectWithoutFavorite_componentInput = {
    where: ComponentsWhereUniqueInput
    create: XOR<ComponentsCreateWithoutFavorite_componentInput, ComponentsUncheckedCreateWithoutFavorite_componentInput>
  }

  export type UsersUpsertWithoutFavorite_componentInput = {
    update: XOR<UsersUpdateWithoutFavorite_componentInput, UsersUncheckedUpdateWithoutFavorite_componentInput>
    create: XOR<UsersCreateWithoutFavorite_componentInput, UsersUncheckedCreateWithoutFavorite_componentInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutFavorite_componentInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutFavorite_componentInput, UsersUncheckedUpdateWithoutFavorite_componentInput>
  }

  export type UsersUpdateWithoutFavorite_componentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateWithoutFavorite_componentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentsUpsertWithoutFavorite_componentInput = {
    update: XOR<ComponentsUpdateWithoutFavorite_componentInput, ComponentsUncheckedUpdateWithoutFavorite_componentInput>
    create: XOR<ComponentsCreateWithoutFavorite_componentInput, ComponentsUncheckedCreateWithoutFavorite_componentInput>
    where?: ComponentsWhereInput
  }

  export type ComponentsUpdateToOneWithWhereWithoutFavorite_componentInput = {
    where?: ComponentsWhereInput
    data: XOR<ComponentsUpdateWithoutFavorite_componentInput, ComponentsUncheckedUpdateWithoutFavorite_componentInput>
  }

  export type ComponentsUpdateWithoutFavorite_componentInput = {
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    component_properties?: ComponentPropertiesUpdateManyWithoutComponentNestedInput
    subtype?: ComponentSubtypeUpdateOneRequiredWithoutComponentsNestedInput
  }

  export type ComponentsUncheckedUpdateWithoutFavorite_componentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    subtype_id?: IntFieldUpdateOperationsInput | number
    component_properties?: ComponentPropertiesUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ComponentsCreateWithoutComponent_propertiesInput = {
    title: string
    component_photo: string
    description: string
    documentation_name: string
    favorite_component?: FavoriteComponentsCreateNestedManyWithoutComponentInput
    subtype: ComponentSubtypeCreateNestedOneWithoutComponentsInput
  }

  export type ComponentsUncheckedCreateWithoutComponent_propertiesInput = {
    id?: number
    title: string
    component_photo: string
    description: string
    documentation_name: string
    subtype_id: number
    favorite_component?: FavoriteComponentsUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentsCreateOrConnectWithoutComponent_propertiesInput = {
    where: ComponentsWhereUniqueInput
    create: XOR<ComponentsCreateWithoutComponent_propertiesInput, ComponentsUncheckedCreateWithoutComponent_propertiesInput>
  }

  export type ComponentsUpsertWithoutComponent_propertiesInput = {
    update: XOR<ComponentsUpdateWithoutComponent_propertiesInput, ComponentsUncheckedUpdateWithoutComponent_propertiesInput>
    create: XOR<ComponentsCreateWithoutComponent_propertiesInput, ComponentsUncheckedCreateWithoutComponent_propertiesInput>
    where?: ComponentsWhereInput
  }

  export type ComponentsUpdateToOneWithWhereWithoutComponent_propertiesInput = {
    where?: ComponentsWhereInput
    data: XOR<ComponentsUpdateWithoutComponent_propertiesInput, ComponentsUncheckedUpdateWithoutComponent_propertiesInput>
  }

  export type ComponentsUpdateWithoutComponent_propertiesInput = {
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    favorite_component?: FavoriteComponentsUpdateManyWithoutComponentNestedInput
    subtype?: ComponentSubtypeUpdateOneRequiredWithoutComponentsNestedInput
  }

  export type ComponentsUncheckedUpdateWithoutComponent_propertiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    subtype_id?: IntFieldUpdateOperationsInput | number
    favorite_component?: FavoriteComponentsUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ComponentTypeCreateWithoutSubtypesInput = {
    type_name: string
    type_description: string
    type_image: string
  }

  export type ComponentTypeUncheckedCreateWithoutSubtypesInput = {
    id?: number
    type_name: string
    type_description: string
    type_image: string
  }

  export type ComponentTypeCreateOrConnectWithoutSubtypesInput = {
    where: ComponentTypeWhereUniqueInput
    create: XOR<ComponentTypeCreateWithoutSubtypesInput, ComponentTypeUncheckedCreateWithoutSubtypesInput>
  }

  export type ComponentsCreateWithoutSubtypeInput = {
    title: string
    component_photo: string
    description: string
    documentation_name: string
    favorite_component?: FavoriteComponentsCreateNestedManyWithoutComponentInput
    component_properties?: ComponentPropertiesCreateNestedManyWithoutComponentInput
  }

  export type ComponentsUncheckedCreateWithoutSubtypeInput = {
    id?: number
    title: string
    component_photo: string
    description: string
    documentation_name: string
    favorite_component?: FavoriteComponentsUncheckedCreateNestedManyWithoutComponentInput
    component_properties?: ComponentPropertiesUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentsCreateOrConnectWithoutSubtypeInput = {
    where: ComponentsWhereUniqueInput
    create: XOR<ComponentsCreateWithoutSubtypeInput, ComponentsUncheckedCreateWithoutSubtypeInput>
  }

  export type ComponentsCreateManySubtypeInputEnvelope = {
    data: ComponentsCreateManySubtypeInput | ComponentsCreateManySubtypeInput[]
  }

  export type ComponentTypeUpsertWithoutSubtypesInput = {
    update: XOR<ComponentTypeUpdateWithoutSubtypesInput, ComponentTypeUncheckedUpdateWithoutSubtypesInput>
    create: XOR<ComponentTypeCreateWithoutSubtypesInput, ComponentTypeUncheckedCreateWithoutSubtypesInput>
    where?: ComponentTypeWhereInput
  }

  export type ComponentTypeUpdateToOneWithWhereWithoutSubtypesInput = {
    where?: ComponentTypeWhereInput
    data: XOR<ComponentTypeUpdateWithoutSubtypesInput, ComponentTypeUncheckedUpdateWithoutSubtypesInput>
  }

  export type ComponentTypeUpdateWithoutSubtypesInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    type_description?: StringFieldUpdateOperationsInput | string
    type_image?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentTypeUncheckedUpdateWithoutSubtypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    type_description?: StringFieldUpdateOperationsInput | string
    type_image?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentsUpsertWithWhereUniqueWithoutSubtypeInput = {
    where: ComponentsWhereUniqueInput
    update: XOR<ComponentsUpdateWithoutSubtypeInput, ComponentsUncheckedUpdateWithoutSubtypeInput>
    create: XOR<ComponentsCreateWithoutSubtypeInput, ComponentsUncheckedCreateWithoutSubtypeInput>
  }

  export type ComponentsUpdateWithWhereUniqueWithoutSubtypeInput = {
    where: ComponentsWhereUniqueInput
    data: XOR<ComponentsUpdateWithoutSubtypeInput, ComponentsUncheckedUpdateWithoutSubtypeInput>
  }

  export type ComponentsUpdateManyWithWhereWithoutSubtypeInput = {
    where: ComponentsScalarWhereInput
    data: XOR<ComponentsUpdateManyMutationInput, ComponentsUncheckedUpdateManyWithoutSubtypeInput>
  }

  export type ComponentsScalarWhereInput = {
    AND?: ComponentsScalarWhereInput | ComponentsScalarWhereInput[]
    OR?: ComponentsScalarWhereInput[]
    NOT?: ComponentsScalarWhereInput | ComponentsScalarWhereInput[]
    id?: IntFilter<"Components"> | number
    title?: StringFilter<"Components"> | string
    component_photo?: StringFilter<"Components"> | string
    description?: StringFilter<"Components"> | string
    documentation_name?: StringFilter<"Components"> | string
    subtype_id?: IntFilter<"Components"> | number
  }

  export type ComponentSubtypeCreateWithoutTypeInput = {
    subtype_name: string
    components?: ComponentsCreateNestedManyWithoutSubtypeInput
  }

  export type ComponentSubtypeUncheckedCreateWithoutTypeInput = {
    id?: number
    subtype_name: string
    components?: ComponentsUncheckedCreateNestedManyWithoutSubtypeInput
  }

  export type ComponentSubtypeCreateOrConnectWithoutTypeInput = {
    where: ComponentSubtypeWhereUniqueInput
    create: XOR<ComponentSubtypeCreateWithoutTypeInput, ComponentSubtypeUncheckedCreateWithoutTypeInput>
  }

  export type ComponentSubtypeCreateManyTypeInputEnvelope = {
    data: ComponentSubtypeCreateManyTypeInput | ComponentSubtypeCreateManyTypeInput[]
  }

  export type ComponentSubtypeUpsertWithWhereUniqueWithoutTypeInput = {
    where: ComponentSubtypeWhereUniqueInput
    update: XOR<ComponentSubtypeUpdateWithoutTypeInput, ComponentSubtypeUncheckedUpdateWithoutTypeInput>
    create: XOR<ComponentSubtypeCreateWithoutTypeInput, ComponentSubtypeUncheckedCreateWithoutTypeInput>
  }

  export type ComponentSubtypeUpdateWithWhereUniqueWithoutTypeInput = {
    where: ComponentSubtypeWhereUniqueInput
    data: XOR<ComponentSubtypeUpdateWithoutTypeInput, ComponentSubtypeUncheckedUpdateWithoutTypeInput>
  }

  export type ComponentSubtypeUpdateManyWithWhereWithoutTypeInput = {
    where: ComponentSubtypeScalarWhereInput
    data: XOR<ComponentSubtypeUpdateManyMutationInput, ComponentSubtypeUncheckedUpdateManyWithoutTypeInput>
  }

  export type ComponentSubtypeScalarWhereInput = {
    AND?: ComponentSubtypeScalarWhereInput | ComponentSubtypeScalarWhereInput[]
    OR?: ComponentSubtypeScalarWhereInput[]
    NOT?: ComponentSubtypeScalarWhereInput | ComponentSubtypeScalarWhereInput[]
    id?: IntFilter<"ComponentSubtype"> | number
    subtype_name?: StringFilter<"ComponentSubtype"> | string
    type_id?: IntNullableFilter<"ComponentSubtype"> | number | null
  }

  export type FavoriteComponentsCreateManyUserInput = {
    component_id: number
  }

  export type FavoriteComponentsUpdateWithoutUserInput = {
    component?: ComponentsUpdateOneRequiredWithoutFavorite_componentNestedInput
  }

  export type FavoriteComponentsUncheckedUpdateWithoutUserInput = {
    component_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteComponentsUncheckedUpdateManyWithoutUserInput = {
    component_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteComponentsCreateManyComponentInput = {
    user_id: number
  }

  export type ComponentPropertiesCreateManyComponentInput = {
    id?: number
    property_name: string
    property_value: string
  }

  export type FavoriteComponentsUpdateWithoutComponentInput = {
    user?: UsersUpdateOneRequiredWithoutFavorite_componentNestedInput
  }

  export type FavoriteComponentsUncheckedUpdateWithoutComponentInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteComponentsUncheckedUpdateManyWithoutComponentInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type ComponentPropertiesUpdateWithoutComponentInput = {
    property_name?: StringFieldUpdateOperationsInput | string
    property_value?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentPropertiesUncheckedUpdateWithoutComponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    property_name?: StringFieldUpdateOperationsInput | string
    property_value?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentPropertiesUncheckedUpdateManyWithoutComponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    property_name?: StringFieldUpdateOperationsInput | string
    property_value?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentsCreateManySubtypeInput = {
    id?: number
    title: string
    component_photo: string
    description: string
    documentation_name: string
  }

  export type ComponentsUpdateWithoutSubtypeInput = {
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    favorite_component?: FavoriteComponentsUpdateManyWithoutComponentNestedInput
    component_properties?: ComponentPropertiesUpdateManyWithoutComponentNestedInput
  }

  export type ComponentsUncheckedUpdateWithoutSubtypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
    favorite_component?: FavoriteComponentsUncheckedUpdateManyWithoutComponentNestedInput
    component_properties?: ComponentPropertiesUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ComponentsUncheckedUpdateManyWithoutSubtypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    component_photo?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    documentation_name?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentSubtypeCreateManyTypeInput = {
    id?: number
    subtype_name: string
  }

  export type ComponentSubtypeUpdateWithoutTypeInput = {
    subtype_name?: StringFieldUpdateOperationsInput | string
    components?: ComponentsUpdateManyWithoutSubtypeNestedInput
  }

  export type ComponentSubtypeUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtype_name?: StringFieldUpdateOperationsInput | string
    components?: ComponentsUncheckedUpdateManyWithoutSubtypeNestedInput
  }

  export type ComponentSubtypeUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtype_name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentsCountOutputTypeDefaultArgs instead
     */
    export type ComponentsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentSubtypeCountOutputTypeDefaultArgs instead
     */
    export type ComponentSubtypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentSubtypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentTypeCountOutputTypeDefaultArgs instead
     */
    export type ComponentTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentsDefaultArgs instead
     */
    export type ComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteComponentsDefaultArgs instead
     */
    export type FavoriteComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteComponentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentPropertiesDefaultArgs instead
     */
    export type ComponentPropertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentPropertiesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentSubtypeDefaultArgs instead
     */
    export type ComponentSubtypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentSubtypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentTypeDefaultArgs instead
     */
    export type ComponentTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentTypeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}